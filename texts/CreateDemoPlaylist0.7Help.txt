# Introduction to the CreateDemoPlaylist Arexx script #

The playlist format of the Amiga Demo Launcher (ADL) is text based, and although it is
fully possible and not too difficult to make a playlist manually in a text editor, 
it is less time consuming to create it with the help of an Arexx script.

With the Arexx script described here, it is possible to create a playlist to be used
with ADL, supporting the following (ADL) features:

- Runmode: Stock-OCS, Stock-AGA, Fast-OCS/AGA.

- Playmode: Allows demos that lack automatic exit to be stopped after a user spesified
  			amount of time by the means of a hardware reset. Requires an external reset
			device connected to the Amiga`s serial port, see own chapter for more info.

- Prerun mode: An optional AmigaDOS script can be run before the actual demo.

Furthermore, some global script configuration settings can be defined:

- The playlist ADL features described above can be automatically saved into a demo 
  configuration file. If enabled, one configuration file is created for each demo, 
  with a filename syntax of _dl.demoname (truncated to max 30 characters).

- The demo configuration files can be stored together with the demo executable, OR in a 
  defined (global) folder (recommended). 

- When a playlist is transferred to the ADL playback queue in memory, the playlist
  entries can either be inserted at the top of the playlist queue, OR added to the 
  bottom.

- It is also possible to spesify the maximum amount of playlist entries (1-99) in the
  ADL playback queue (the more entries, the more CHIP RAM will be allocated for this).


# Requirements #

-  An AGA Amiga (an accelerated A1200 is the overall best suited machine).
- *Workbench 3.1 with a minimum screen resolution of 640x256.
-  AmigaDOS commands RequestFile, RequestChoice, and Copy (all included in Workbench). 
-  Arexx package (included in Workbench).
-  Rexxmast (part of Arexx package) must be running.
- #Reset tool / command.
-  And of course, Amiga Demo Launcher 1.2 or later version.

* Some earlier (or later) versions of the operating system may also work, but they have
  not been tested. Regarding Workbench 3.1.4 released in 2018, the script does not work
  properly with this version of the operating system as the development team changed 
  the behavior of the updated version of RequestFile (intentially or not). The script 
  might work if you use RequestFile from Workbench 3.1 instead (not tested). 

# Optional. Script has been tested with The ABCS Amiga Reset V1.0, and the argument 
  has been adapted for this spesific reset tool, but it can be configured for 
  other reset tools as well.


# Launching the script #

The script may be launched from AmigaShell using the RX command like this: 

RX CreateDemoPlaylist

or from Workbench by double-clicking the supplied icon (the RX command still needs to 
be present in the search path).


# Script startup #

When the script have been launched from Workbench or AmigaShell, it will first look for
its dependencies, and it will exit with an error message if some of the required 
files are not found. 

Next, it will check if a script configuration file is present, and if so, load it.
Any invalid content will be replaced with default settings.
By default, the script will look for the file _ScriptCfg in ENVARC:.

If a script configuration file is not present, it will notify the user, and give him
the choice of creating a new configuration file (or not).

Next, a requester is shown that contains the main menu. 


# The script main menu #

Function:	Description:

CREATE/ 	Define a new playlist, or select an existing playlist to append new 
APPEND:		entries to. The user will then be taken through the process of 
			selecting demo executable(s) for the playlist, and then configure the 
			runmode, playmode, and prerun modes for each of them. If demo configuration 
			files have been detected and loaded, the user can choose to use the loaded
			settings for the current or all selected demo executables instead of 
			configuring them himself. 

TRANSFER:	Transfer an existing playlist to the ADL playback queue, and then notify
			the user of the result.

SHOW:		Show the status of the current ADL playback queue.

CFG1/CFG2:	Show the script configuration menu. From here the user may change the 
			global script settings. This menu have been split in 2 because of the 
			limitation in the length of the RequestChoice arguments.

QUIT:		Quit the script


# The script configuration menu 1 #

Function:	Description:

DCF:		Enable automatic creation of a demo a configuration file each time
			the user have set up the runmode, playmode and prerun modes for a demo.
			This configuration file will be updated / rewritten at a later stage only 
			if the user configures the same demo over again with different settings.

!DCF:		Disable automatic creation of demo configuration files.
			Please note that a demo configuration file will still be detected and 
			loaded if its corresponding demo is used in an ADL playlist.  

CFP:		Save the individual demo configuration files in a user defined global 
			directory. Please note that if, during the creation of a playlist, a 
			spesific demo configuration file is not found at this location, the script
			will also look for it in the demo executable`s home directory.
			Also worth noting is that if the demo configuration is loaded from the demo
			home directory, AND automatic creation of demo configuration files is
			enabled AND the user uses the ALLCFG function, all the settings from the	
			configuration files in the demo home directory will be rewritten to new
			configuration files in the user defined global demo configuration 
			directory.
 
!CFP:		Save the individual demo configuration files into the demo 
			executable`s home directory. 

RSQ:		When transferring a playlist to the ADL playback queue, the entries will
			be inserted at the top of the queue, overwriting any previous content.

!RSQ:		When transferring a playlist to the ADL playback queue, the entries will
			be added to the bottom of the queue, keeping any previous content.

SAVE:		Return to the main menu. The current settings are saved, and will be used.

USE:		Return to the main menu. The current settings will be used.

EXIT:		Return to the main menu. The previous settings will be used (undo changes).

QUIT:		Quit the script.


# The script configuration menu 2 #

Function:	Description:

+10:		Add 10 to the maximum number of entries in the ADL playback queue.

+1:			Add 1 to the maximum number of entries in the ADL playback queue.

SAVE:		Return to the main menu. The current settings are saved, and will be used.

USE:		Return to the main menu. The current settings will be used.

EXIT:		Return to the main menu. The previous settings will be used (undo changes).

QUIT:		Quit the script.

 
# Creating a new playlist #

Click on CREATE/APPEND in the main menu, and a file-requester will appear. Select the 
directory where the playlist should be saved, type a name for the playlist, and then 
click OK. 

If you selected an existing playlist instead, you will be given the choice to overwrite
it entirely, or append new entries to it.

In the second file-requester that appear, navigate to a directory where one or more 
demos to be added to the playlist are located, and then select the demo(s).

If you have several demo executables in the same directory you wish to add, push the 
shift key while click-selecting the files to allow multi-selection. Click OK when done.

The 3 next requesters allows you to configure the runmode, playmode and prerun modes 
respectively for each demo executable. In the title-field of the 3 requesters, you can
always see the sequence number of the demo you are configuring against the total number
of demos selected. 

The filename of the current demo is also shown in the requester body.

If the script has already detected and loaded a configuration file for the demo you are
about to configure, 2 additional buttons are visible in those 3 requesters: 
CFG and ALLCFG.

If you click CFG, the script will pick the current requester setting (runmode, playmode
or prerun mode) from the demo configuration file.

If you click ALLCFG, the script will pick all 3 settings from the demo configuration
file, and it will do this for all other demos that have a configuration file as well. 
This leaves the user to configure only the demos that lack configuration files. 

This feature is beneficial if you have configured the same demo(s) at an earlier stage,
and have allowed the script to save configuration files for those demos, as it can now
save you some time in configuring the same demos for this playlist.


# Runmode #

With this requester, you can select a runmode for the current demo, either STOCK-OCS,
STOCK-AGA, or Fast-OCS/AGA.

Please see the ADL spesific chapters of this guide for more information about the 
runmodes, but in general, select the runmode best suited for each demo. If the demo was
created to run on a stock Amiga 500 or stock Amiga 1200, try the STOCK-OCS or STOCK-AGA 
modes respectively, or the Fast-OCS/AGA mode for demos requiring accelerated Amigas.


# Playmode #

With this requester, you can select the playmode for the current demo.

Click INFINITE if the demo exits by itself, or if user interaction (mouse click or 
keyboard-reset) is an acceptable means to skip to the next demo in the playlist.

Click DEFINED to have the demo terminate by the means of a timer automated hardware
reset. In the requester that pops up, you can enter a 4-digit playtime (minutes and
seconds) by clicking the numeric buttons. After 4 digits have been entered, the DONE
button appears in the requester, which you click to continue, unless you did a mistake
and wish to enter the 4-digit playtime over again.

Please note that this feature requires an external reset device connected to your 
Amiga`s serial port, see own chapter for more information.


# Prerun mode #

With this requester, you can select the prerun mode for the current demo.
Click SCRIPT to select an AmigaDOS prerun script file to run before the demo.
The script can contain programs / tools to make some demos run better, like 
OxyPatcher or similar. Select NONE if you do not wish to use a prerun script.

Please note that the combined length of path and filename of the prerun script must
not exceed 63 characters!


If you initially selected more than one demo executable, the 3 mode-requesters will 
appear again for you to configure the next demo(s), and the sequence number of the 
title field of the requesters will be incremented.


# Adding additional demos #

When all demos have been configured, a file requester will appear and ask you to 
select even more demo executable(s). If you do not wish to add more demos to the 
playlist, click CANCEL in the file requester.


# Save and transfer of playlist #

A requester now informs you that a certain number of entries has been added to a 
temporary playlist in ENV. The temporary file is used to minimize writing to physical
disk. 

Click SAVE to save the playlist to the directory and with the filename spesified in the 
beginning. If you only wish to run the playlist without saving it, click TRANSFER to 
simply add it to the ADL playback queue. Click SAVE&TRANSFER to do both.

If TRANSFER or SAVE&TRANSFER was selected, a requester will show you the result of the 
transfer. If the script detected the reset command, a RESET button will also be visible
in this requester, and it can be clicked to reset the Amiga. Else, simply click QUIT.


# Script definitions #

Due to the ASCII nature of the AREXX script, it can easily be changed by other users
to suit their needs. In the start of the script, there are a number of definitions for 
paths, commands and keywords. If you wish the script to look for a certain file 
somewhere else, or alter its name, it can be changed here.


# Error messages #

If the script for some reason is unable to open a file for reading or writing, or an 
invalid filename or path has been spesified, the script will normally exit with an 
error message.


# Reset device #

A reset device is needed if you wish to automatically stop a demo after a certain
amount of time, typically a demo that have no automatic exit. 

The reset device itself, as we have built it, is a small circuit board soldered onto 
a 25-pin DSUB male connector, and housed inside a metal DSUB shell. The reset device
is plugged into the Amiga serial port.

It consists of a small PIC microcontroller that listens to the RS232 TX line for timer
commands from the ADL, and it also has a small buzzer, which gives audible feedback
to commands and actions:

- 1 short beep = valid timer command received
- 2 short beeps = timer command cancelled
- 1 long beep = reset signal issued
- 1 long beep (lower frequency) = power up indication

If a demo entry has a spesified playtime set up, the ADL sends a small command string
to the serial port that configures / starts the PIC timer, and when the timer has 
counted all down, it issues a 480ms reset signal that resets the Amiga. 

Since the Amiga reset signal is not available on the Amiga serial port, an additional
wire is needed inside the Amiga for this to work. In short, this wire needs to be 
connected between serial port pin 13 (easily available inside the Amiga), and the Amiga
CPU reset line on the motherboard (not keyboard reset). See pictures and project files
included in the archive for details of how to install the reset-wire in an A1200.


# Temporary files #

The script uses redirect files in ENV: to pick up the output from RequestFile and 
RequestChoice, and their filenames all start with _.

The files are not deleted by the script as they are very small, and also sometimes 
useful for debugging.


# Executing AmigaDemoLauncher #

The intended implementation of ADL when used with this script, is executing it from the
startup-sequence like this:

Failat 6
C:AmigaDemoLauncher QUIET SOFTRESET
Failat 20

These 3 lines should be inserted just below Setpatch.

With this implementation, any pending demo in the ADL playback queue will be started 
during boot, and if the demo exited by itself or by user interaction, ADL will then
do a software reset. 

For demos without automatic exit, the reset device may be used, which will do a 
hardware reset instead. During the following boot the next item will be started, 
and so on, until the playback queue is empty.

When the playback queue is empty, the lines above will not affect normal booting into
Workbench.
