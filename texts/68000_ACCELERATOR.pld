Name     68000_Accelerator ;
PartNo   00 ;
Date     03.07.2021 ;
Revision 0.73 ;
Designer Yulquen74 ;
Company   ;
Assembly None ;
Location  ;
Device   f1508ispplcc84 ;


/*******************************************************************************************************************************************************************************************************/
/*																												      	*/
/*				PROJECT:		Control logic for "Simple CPU / RAM board for Amiga 500+ with A590"												      	*/
/*																												      	*/
/*				DEVICE TYPE:		ATF1508AS CPLD (10ns version)																	      	*/
/*																												      	*/
/*				VERSION:		V0.73																					      	*/
/*																												      	*/
/*				STATUS:		Working																				      	*/
/*																												      	*/
/*																													*/
/*				DESIGN FEATURES / LIMITATIONS:																				      	*/
/*																												      	*/
/*				- MC68HC000FN20 CPU with 3 clock modes: Stock speed (7 MHz motherboard clock), full speed (onboard oscillator, typical 60 MHz) and half speed (onboard oscillator / 2).	*/
/*				- 16MB SRAM (2 x R1WV6416RSA-7SR in 8Mx8 mode). Used for all Fast-RAM / Fast-ROM / ROM overlay definitions. See memory map below.	 						*/
/*				- Configurable operation by the means of 3 Read / Write configuration words (nibbles), defined inside CPLD. See config register map below.					*/
/*				- Supports A590 controller, which can DMA into all of Fast-RAM. Note: Disable ALL A590 internal RAM! Also, ONLY A590 is supported, ANY OTHER DEVICE MAY CAUSE DAMAGE!	*/
/*				- Fast ROM: Kickstart ROM image is copied into same addresses in SRAM + start of SRAM (with Boardcontrol software) to support ROM Overlay with different ROM images.		*/
/*				- Possible to exploit all the otherwise unused memory ranges within the 24 bit address space, see memory map below. 									*/
/*				- No SRAM wait states in stock and half speed mode, but 1 SRAM wait state in full speed mode due to accumulated delay inside CPLD chip.						*/
/*				- Oscillator frequencies up to 60 MHz should be possible with 70ns SRAM, while 55ns SRAM can do some more (typically 66 MHz).							*/			
/*				- CLI program (BoardControl) used for changing CPU clock mode, and enable / disable Fast-ROM and selected Fast-RAM ranges. See Config register map below.			*/
/*				- No Autoconfig. Allows A590 to AutoConfig properly. Ranger RAM is discovered automatically by Kickstart ROM, all additional RAM needs to be added manually during boot.	*/
/*				- No IDE interface. W i l l  N o t  H a p p e n. E v e r.																	*/
/*																											      		*/
/*																													*/
/*				MEMORY MAP:																								*/
/*																													*/
/*				0x000000 - 0x07FFFF / 512KB:	LOW part of Chip RAM space. If Fast-ROM is configured, Kickstart ROM image is copied here in SRAM to support ROM Overlay at reset.	 	*/
/*				0x080000 - 0x0FFFFF / 512KB:  	HIGH part of Chip RAM space. May be configured as Fast-RAM (during boot) on A500's with only 512KB Chip RAM. 					*/
/*				0x100000 - 0x1FFFFF / 1024KB: 	UPPER part of Chip RAM space. May be configured as Fast-RAM (during boot) on A500's with 1MB Chip RAM or less. 				*/
/*				0x200000 - 0x9FFFFF / 8192KB: 	Z2 Fast-RAM space, supports Auto-Config (not used in this context). Always mapped as Fast-RAM.					      		*/
/*				0xA00000 - 0xBFCFFF / 2036KB: 	Reserved. Always mapped as Fast-RAM. 													      		*/ 
/*				0xBFD000 - 0xBFDFFF / 4KB:	   	CIA-B (EVEN).																			*/
/*				0xBFE000 - 0xBFEFFF / 4KB:	   	CIA-A (ODD).																			*/
/*				0xBFF000 - 0xBFFFFF / 4KB:	   	Config registers 0-3 inside CPLD. Mapped to addesses 0xBFF000, 0xBFF400, 0xBFF800 and 0xBFFC00  respectively, see config reg.map below.	*/
/*				0xC00000 - 0xDBFFFF / 1792KB: 	Ranger / Trapdoor Slow-Fast area. Always mapped as Fast-RAM. This range is detected and added by the Kickstart ROM during reset.		*/
/*				0xDC0000 - 0xDC0FFF / 4KB:	   	Mainboard Real Time Clock space.																*/
/*				0xDC1000 - 0xDCFFFF / 60KB:	   	UPPER part of the Real Time Clock space, although not normally used. May be configured as Fast-RAM (during boot). 				*/
/*				0xDD0000 - 0xDEFFFF / 128KB:  	Reserved. Always mapped as Fast-RAM. 															*/
/*				0xDF0000 - 0xDFEFFF / 60KB:   	Reserved. May be configured as Fast-RAM (during boot). 												*/
/*				0xDFF000 - 0xDFFFFF / 4KB:    	Custom Chip Registers.																	*/
/*				0xE00000 - 0xE7FFFF / 512KB:  	Reserved. Always mapped as Fast-RAM. 															*/
/*				0xE80000 - 0xE8FFFF / 64KB:   	Primary Autoconfig space (before re-allocation) during Reset. May be configured as Fast-RAM (during boot). 					*/
/*				0xE90000 - 0xE9FFFF / 64KB:	  	Secondary Autoconfig space (after re-allocation).													*/
/*				0xEA0000 - 0xEFFFFF / 384KB: 	The rest of Secondary Autoconfig space. Always mapped as Fast-RAM. 			 								*/
/*				0xF00000 - 0xF7FFFF / 512KB: 	Secondary Kickstart ROM space. Always mapped as Fast-RAM. 			 									*/
/*				0xF80000 - 0xFFFFFF / 512KB: 	Primary Kickstart ROM space. If Fast-ROM is Configured, this range is mapped as Fast-RAM, and Kickstart ROM image is copied here.		*/
/*																													*/
/*				NOTES:	Except the Ranger area, all memory ranges statically mapped as Fast-RAM, or configured as such, must be added to the memory pool using Addmem commands during boot.	*/
/*					Ranger Fast-RAM is added with priority -5 by Kickstart ROM; use higher priority when adding small chunks to be able to fill them during boot. Also, adjacent ranges	*/
/*					should be added as one continuous range.																			*/
/*																													*/
/*					The following WinCUPL options should be set before doing a device dependant compile:												*/
/*					- Compiler: Ouput Files/Jedec + Fuse Plots + Equations + List, Minimization/Quine-McCluskey, General/Simulate + JEDEC name = PLD name, Devices: Device in file.	*/
/*																													*/
/*					Summary of accululated changes to PCB V1.0 hardware, and installation:														*/
/*					- IPL2:IPL0 signals: Added 510R pullup resistors to CPU interrupt lines to eliminate false interrupts.										*/
/*					- RST_MB signal: Added 470R pullup resistor and 100pF cap to ground to eliminate problem with software resets.								*/
/*					- CPU_AS / CPU_RW / CPU_LDS / CPU_UDS: Added 4K7 pullup resistors. If not done on AS_CPU line, this results in a dead system.						*/
/*					- Soldered 100nF decoupling caps directly to the Vcc/Gnd pins on the bottom of both CPU (pins 14/16 & 52/56) and CPLD (pins 42/43 & 82/3) to get stable operation.	*/
/*					- OVR_MB signal: Installed wire from PCB CDAC connector to mainboard OVR signal (Gary pin 29). With this Gary is forced to ignore all SRAM/SROM accesses.		*/
/*					- Added small heat-sinks to CPU and CPLD, and added a small fan running at 5V to get air flow as CPLD otherwise gets very hot, and causes instability if not cooled.	*/
/*					- Added riser sockets to Denise to avoid collission with Indivision ECS board. 													*/
/*																													*/
/*																													*/		
/*				CONFIG REGISTER MAP:																							*/
/*																													*/
/*				CFG0/0xBFF000:CFG0_CLK_SEL0	/ D12-																					*/	
/*						CFG0_CLK_SEL1	/ D13- CPU clock mode configuration:																*/
/*				D12	D13																								*/
/*				0	0	Half speed mode (OSC.frequency / 2). This is the default clock mode as A590 does not handle full speed mode until start of boot).					*/
/*				1	0	Full speed mode (OSC.frequency). During reset, mode is changed back to half speed mode (D12 is cleared).								*/	
/*				0	1	Stock speed mode (motherboard 7M clock).																		*/
/*				1	1	Full speed mode (OSC.frequency). Mode is retained during reset, only use with A590 disabled.										*/
/*				D14	 	CFG0_CFG_WRP_EN  / D14: Config Write protect. If Set, all Config bits are Write protected (Note: CFG2_SRAM_10 / CFG1_SRAM_08 / CFG2_SRAM_E8 may still be set).*/
/*				D15		CFG0_CFG_RSTP_EN / D15: Config Reset protect. If Set, Config bit CFG0_WP will not be cleared during Reset.								*/
/*																													*/
/*				CFG1/0xBFF400:																							*/
/*				D12	 	CFG1_SRAM_08_EN / D12:  Enable Fast-RAM in range 0x080000 - 0x0FFFFF. Only for A500's with no more than 512KB Chip RAM. Bit always cleared during Reset.	*/
/*				D13		CFG1_SRAM_DC_EN / D13:  Enable Fast-RAM in range 0xDC1000 - 0xDCFFFF.													*/
/*				D14		CFG1_SRAM_DF_EN / D14:  Enable Fast-RAM in range 0xDF0000 - 0xDFEFFF.													*/
/*				D15		CFG1_SRAM_E8_EN / D15:  Enable Fast-RAM in range 0xE80000 - 0xE8FFFF. Bit always cleared during Reset.									*/
/*																													*/
/*				CFG2/0xBFF800:																							*/
/*				D12		CFG2_SRAM_00_EN / D12:  Enable Fast-RAM in range 0x000000 - 0x0FFFFF. Only set by BoardControl software while copying ROM image to ROM overlay space.		*/
/*				D13		CFG2_SRAM_10_EN / D13:  Enable Fast-RAM in range 0x100000 - 0x1FFFFF. Only for A500's with 1MB or less Chip RAM. Bit always cleared durint Reset.		*/
/*				D14		CFG2_SRAM_F8_EN / D14:  Enable Fast-RAM in range 0xF80000 - 0xFFFFFF. Set in BoardControl before copying ROM image here when using Fast-ROM. 			*/			
/*				D15		CFG2_ROM_WRP_EN / D15:  Write Protect Fast-ROM. Inhibits ROM image in Fast-RAM to be overwritten/damaged by ill behaved software.					*/	
/*																													*/
/*				CFG3/0xBFFC00:																							*/
/*				D12		CFG3_SRAM_F0_EN / D12:  Enable Fast-RAM in range 0xF00000 - 0xF7FFFF.													*/
/*																													*/
/*				VERSION	Problems with random crashes on some trackload demos - another user found that this was caused by noise on IPL lines - added 510R pullup resistors		*/
/*				HISTORY/	on lines IPL0 / IPL1 / IPL2 - problem gone.																	*/
/*				NOTES:		Appears to work from floppy @ 40MHz. Dead at 50MHZ +, but now at least lights power led during reset sequence after removing async reset from  			*/
/*						address detect registers.																				*/
/*						Now runs at 50 MHz after adding a 7MHz waitstate for CIA DTACK trigger.													*/
/*						A590 only works up to 40 MHz.																			*/
/*						5,78 MIPS @ 54MHz (no Fast ROM).																			*/
/*						Added Config registers (but not the functionality they represent).														*/
/*						Added Fast ROM functionality. Not tested, but normal acceleration still works.												*/
/*						Corrected some Fast ROM stuff. Fast ROM + clock changing now works, also A590 (clock halved during start of boot).							*/
/*						But added logic seems to have created a waitstate as speed is now slower.													*/
/*						The 6 MIPS mark in Sysinfo is now reached by increasing clock to 66,5 MHz.													*/
/*					0.59: 	Reduced logic to below 50% again, only 4 writable config bits. Now normal non waitstate mode is regained. Added decoupling caps below both   		 	*/
/*					      	CPU and CPLD. 5,88 mips @ 54 MHz.				 												     		 	*/
/*					0.61: 	Changed Config bits. Can now add non used Chip RAM as Fast RAM. Appears to work, but crashes and gfx corruption observed when running at half speed. 	 	*/
/*					0.62: 	Added DTACK waitstates during half speed operation													      			*/
/*					0.63: 	Added 25 bit reset delay ripple counter (not used for anything atm). Tested - performance drops from start as CPLD heats up. Programmed setup   		*/
/*					      	into CPLD with direct decoupling caps - performance is retained.											      			*/
/*					0.64: 	New Config bit structure, 2 nibbles at different address range. Also implemented ROM Overlay (not tested). Sysinfo performance retained.	      			*/
/*					0.65: 	Added Reset and Halt signal stretch to correct problems with software reset (Reset pulse is too short, resulting in crash or stuck in Reset)    		*/
/*					      	Did not work properly (Reset trigger did not usually not respond). Added 4,7nF cap between RST_MOB and GND, now software reset appears to be    		*/
/*					      	working. Removed Reset stretch part. Rearranged various signal definitions.										      			*/
/*					0.66: 	Added generation of DTACK signal for A590 device. 													      			*/
/*					      	Added clear of Overlay register during long Reset to fix permanent hang problem during long Reset after other Kickstart had been loaded.	      			*/
/*					      	Re-arranged Config bits, added Config read support, cleaned up comments.										      			*/
/*					0.67: 	Added 7MHz mode.																		      			*/
/*					0.68: 	Added OVR output and implemented DTACK output for A590 transfers - A590 no longer needs to generate own DTACK, or use Gary address hack board.  		*/
/*																													*/
/*						Usable versions:																					*/
/*					0.69: 	Changed the protection scheme of the CFG1_SRAM_10 config bit. While it is protected, it is possible to set it HIGH, but not LOW again.	      			*/
/*					0.70: 	Opened up address range 0xF00000 - 0xF7FFFF for use as fastram. Boardcontrol V1.01 required. Note: This area must be cleared at start of 	      			*/
/*					      	startup-sequence during boot to avoid problems, using clearF0 command (will be implented in newer Boardcontrol version).			      			*/
/*					0.71: 	Added new config register, CFG2, moved CFG1 bits to CFG2 since address of new CFG2 is the same as existing CFG1, and added additional bits to CFG1: 		*/
/*					      	-CFG1_SRAM_08_EN: Enables Fast-RAM in area 0x080000 - 0x0FFFFF.														*/
/*						-CFG1_SRAM_DC_EN: Enables Fast-RAM in area 0xDC1000 - 0xDCFFFF.						      								*/
/*						-CFG1_SRAM_DF_EN: Enables Fast-RAM in area 0xDF0000 - 0xDFEFFF.						      								*/
/*						-CFG1_SRAM_E8_EN: Enables Fast-RAM in area 0xE80000 - 0xE8FFFF.						      								*/
/*					0.73: Added a new config bit:																				*/
/*						- CFG3_SRAM_F0_EN: Enables Fast-RAM in area 0xF00000 - 0xF7FFFF. 														*/
/*																													*/
/*						Use command AddDcDfE8F0 to set respective new config bits for now (until implemented in newer version of BoardControl software.					*/
/*						Also use command ClearF0 during boot when using F0 memory, else instability and crashes will occur.									*/
/*						For some reason, the A590 does not crash when reseting at full speed when using ROM3.2 (but does so with ROM3.1) so it is not necessary to go to half speed 	*/
/*						mode during reset anymore (while using 3.2 ROM). 																*/
/*																													*/ 
/*																													*/
/*				ACRONYMS:	7M		Motherboard 7MHz CPU clock signal.																	*/
/*						ACS		Access.																				*/
/*						ADR		Address.																				*/
/*						An		Address pin.																				*/
/*						.AR		Asynchronous reset input signal for CPLD D type register.													*/	
/*						AS		Address Strobe signal. Originates from CPU or A590 device, whichever is bus master. Active low.								*/
/*						BG		Bus Grant signal. Indicates to potential bus master that CPU will cease control of the bus at the end of the current cycle.	Active low.		*/
/*						BGACK		Bus Grant Acknowledge signal. Indicates that some other device has become bus master. Active low.							*/
/*						BR		Bus Request signal. Indicates to CPU that some other device needs to become the bus master. Active low.						*/
/*						BUF		Data Buffer.																				*/
/*						CFG		Configuration. In this context, refers to the configuration registers defined in CPLD.									*/
/*						CIA		Complex Interface Adapter. Peripheral chips, CIA-A & CIA-B, used in most Amiga models, taking care of peripheral interfaces and system timing.	*/
/*						.CK		Clock input signal to CPLD D type register.															*/
/*						CLK 		Clock.																					*/
/*						CNT		Counter.																				*/
/*						CPLD		Complex Programmable Logic Device.																	*/
/*						CPU		Central Processing Unit.																		*/
/*						.D		Data input signal to CPLD D type register.															*/
/*						DAT		Data.																					*/
/*						DEC		Decode.																				*/
/*						DET		Detect.																				*/
/*						DIR		Direction.																				*/
/*						DLY		Delayed.																				*/
/*						Dn		Data pin.																				*/
/*						DTACK		Data Transfer Acknowledge signal. Originates from Gary (motherboard / peripheral accesses) or CPLD (SRAM or CFG access). Active low.		*/
/*						E		Enable. Own clock generated in CPU, & CPLD (used with half & full speed) for peripheral devices (CIA), 1/10 of 7M clock freq., 40% duty cycle.	*/
/*						EN		Enable.																				*/
/*						EXT		External.																				*/
/*						IPL0-IPL2	Interrupt Priority Level 0-2. These input signals indicate the encoded priority level of the device requesting an interrupt.			*/
/*						LDS		Lower Data Strobe signal. Originates from CPU or A590 device, whichever is bus master. Active low.							*/
/*						MB		Motherboard, in this context Amiga 500 motherboard.														*/
/*						.OE		CPLD pin output enable.																		*/		
/*						OSC.		Oscillator. In this context, a crystal oscillator connected to CPLD, and used in half and full speed CPU clock modes.				*/
/*						OVL		ROM Overlay. With Fast-ROM enbled, the CPLD OVL register enables SRAM  at 0x000000-0x07FFFF @ reset (disabled when write to PRA is detected).	*/			
/*						OVR		Override signal. If asserted, mainboard (Gary) will ignore the bus cycle (address decoding has been overridden). Active low.			*/
/*						PRA		Register in CIA-A. Bit 0 is the ROM Overlay  bit (OVL), which is set during reset to map kickstart ROM to address 0.					*/
/*						Qn		Output from D type register, in this context when several registers has been configured as synchronous or asyncronous counters.			*/
/*						RW		Read / Write signal. Originates from CPU or A590 device, whicever is bus master.										*/
/*						SRAM		Static RAM. In this context, all local fast RAM  and fast ROM ranges defined in memory map above are mapped directly to onboard SRAM.		*/
/*						SROM		Static ROM. In this context, ROM address area in SRAM, where a kickstart ROM image has been copied.							*/
/*						UDS		Upper Data Strobe signal. Originates from CPU or A590 device, whichever is bus master. Active low.							*/
/*						VMA		Valid Memory Address signal. CPU response to VPA, and indicates a valid address on bus, and that the CPU is synced to the E clock. Active low.	*/
/*						VPA		Valid Peripheral Address signal. Indicates to CPU that the addressed device is a peripheral device & should be synced with E clock. Active low.	*/
/*						WE		Write Enable signal.																			*/
/*						WEL		Write Enable Low byte signal.																	*/
/*						WEH		Write Enable High byte signal.																	*/
/*																													*/

/*PIN NAMES: ************** CPLD I/O TYPE: **** CONNECTS TO: *************************** ADDITIONAL INFORMATION: **************************************************************************************/

PIN 17	= A1;			/*	IN		<- MC68HC000 CPU A1				-															      	*/
PIN 16	= A2; 			/*	IN		<- MC68HC000 CPU A2				-															      	*/
PIN 21	= A3; 			/*	IN		<- MC68HC000 CPU A3				-															      	*/
PIN 22	= A4; 			/*	IN	 	<- MC68HC000 CPU A4				-															      	*/
PIN 25	= A5; 			/*	IN		<- MC68HC000 CPU A5				-														      		*/
PIN 20	= A6; 			/*	IN		<- MC68HC000 CPU A6				-														      		*/
PIN 18	= A7; 			/*	IN		<- MC68HC000 CPU A7				-NOT IN USE.														      	*/
PIN 12	= A8;			/*	IN		<- MC68HC000 CPU A8 																			      	*/
PIN 15	= A9;			/*	IN		<- MC68HC000 CPU A9 																			      	*/
PIN 11	= A10;			/*	IN		<- MC68HC000 CPU A10																			      	*/
PIN 9	= A11;			/*	IN		<- MC68HC000 CPU A11																			      	*/
PIN 10	= A12;			/*	IN		<- MC68HC000 CPU A12																			      	*/
PIN 5	= A13;			/*	IN		<- MC68HC000 CPU A13																			      	*/
PIN 8	= A14;			/*	IN		<- MC68HC000 CPU A14																			      	*/
PIN 4	= A15;			/*	IN		<- MC68HC000 CPU A15																			      	*/
PIN 6	= A16;			/*	IN		<- MC68HC000 CPU A16																			      	*/
PIN 81	= A17;			/*	IN		<- MC68HC000 CPU A17																			      	*/
PIN 84	= A18;			/*	IN		<- MC68HC000 CPU A18																			      	*/
PIN 80	= A19;			/*	IN		<- MC68HC000 CPU A19																			      	*/
PIN 79	= A20;			/*	IN		<- MC68HC000 CPU A20																			      	*/
PIN 77	= A21;			/*	IN		<- MC68HC000 CPU A21																			      	*/
PIN 75	= A22;			/*	IN		<- MC68HC000 CPU A22																			      	*/
PIN 76	= A23;			/*	IN		<- MC68HC000 CPU A23																			      	*/

PIN 70	= D12;			/*	IN/OUT		<->MC68HC000 CPU D12				-															      	*/
PIN 69	= D13;			/*	IN/OUT		<->MC68HC000 CPU D13				-															      	*/
PIN 74	= D14;			/*	IN/OUT		<->MC68HC000 CPU D14				-															      	*/
PIN 73	= D15;			/*	IN/OUT		<->MC68HC000 CPU D15				-CONFIG WORDS DATA BITS.												      	*/

PIN 67	= AS_CPU;		/*	IN/OUT		<- MC68HC000 CPU ADDRESS STROBE		OUTPUT ONLY WHILE OTHER BUSMASTER (A590) IS ACTIVE. ADD 4K7 PULLUP RESISTOR (MANDATORY).			      	*/
PIN 60	= RW_CPU;		/*	IN/OUT		<- MC68HC000 CPU READ/WRITE			- 			      													*/
PIN 64	= UDS_CPU;       	/*	IN/OUT		<- MC68HC000 CPU UPPER DATA STROBE		-			      													*/
PIN 63	= LDS_CPU;		/*	IN/OUT		<- MC68HC000 CPU LOWER DATA STROBE		-OUTPUT ONLY WHILE OTHER BUSMASTER (A590) IS ACTIVE. ADD 4K7 PULLUP RESISTOR (OPTIONAL). 			      	*/
PIN 58	= DTACK_CPU;		/*	OUT		-> MC68HC000 CPU DATA TRANSFER ACK.																	*/

PIN 45	= VPA_CPU;		/*	OUT		-> MC68HC000 CPU VALID PERIPHERAL ADR.																  	*/
PIN 48	= VMA_CPU;		/*	IN		<- MC68HC000 CPU VALID MEMORY ACCESS																	*/
PIN 46	= E_CPU;	   	/*	IN		<- MC68HC000 CPU E-CLOCK																		 	*/
PIN 68	= CLK_CPU;		/*	OUT		-> MC68HC000 CPU CLOCK																		      	*/
PIN 57	= BR_CPU;		/*	OUT		-> MC68HC000 CPU BUS REQUEST																	      	*/
PIN 61	= BG_CPU;		/*	IN		<- MC68HC000 CPU BUS GRANT																		      	*/
PIN 54	= BGACK_CPU; 		/*	OUT		-> MC68HC000 CPU BUS GRANT ACKNOWLEDGE 																      	*/

PIN 24	= AS_MB; 		/*	OUT/IN		<->MOTHERBOARD ADDRESS STROBE		-								    							  	*/
PIN 28	= RW_MB;	 	/*	OUT/IN		<->MOTHERBOARD READ/WRITE			-								  							    	*/
PIN 27	= UDS_MB;		/*	OUT/IN		<->MOTHERBOARD UPPER DATA STROBE		-								  							    	*/
PIN 29	= LDS_MB;		/*	OUT/IN		<->MOTHERBOARD LOWER DATA STROBE		-INPUT ONLY WHILE OTHER BUSMASTER (A590) IS ACTIVE.								      	*/
PIN 36	= DTACK_MB;		/*	IN/OUT		<->MOTHERBOARD DATA ACKNOWLEDGE		OUTPUT ONLY WHILE OTHER BUSMASTER (A590) IS ACTIVE.								      	*/
PIN 37	= OVR_MB;		/*	OUT		-> MOTHERBOARD ADDRESS OVERRIDE 		CONNECT TO GARY PIN 29 (OVR).											      	*/
PIN 33	= VPA_MB;	  	/*	IN		<- MOTHERBOARD VALID PERIPHERAL ADDRESS																  	*/
PIN 34	= VMA_MB;		/*	OUT		-> MOTHERBOARD VALID MEMORY ACCESS 																	*/
PIN 35	= E_MB;		/*	OUT		-> MOTHERBOARD E-CLOCK																		  	*/
PIN 83	= CLK_MB;		/*	IN		<- MOTHERBOARD CLOCK (7M) 			MOTHERBOARD 7MHZ CPU CLOCK.												      	*/
PIN 56	= BR_MB;  		/*	IN		<- MOTHERBOARD (A590) BUS REQUEST 																	      	*/
PIN 31	= BG_MB; 		/*	OUT		-> MOTHERBOARD (A590) BUS GRANT 																	      	*/
PIN 30	= BGACK_MB;		/*	IN		<- MOTHERBOARD (A590) BUS GRANT ACK. 																      	*/
PIN 1	= RST_MB;		/*	IN		<- MOTHERBOARD RESET				ADDED 470R PULLUP RESISTOR + 100PF CAP TO GND TO RESOLVE ISSUE WITH SOFTWARE RESETS NOT WORKING PROPERLY.    	*/
				/*			-> MC68HC000 CPU RESET																			*/
PIN 39	= ADR_BUF_OE_MB; 	/*	OUT		-> MOTHERBOARD ADR.BUFFER OUTPUT ENABLE	/ 3 EA.74HCT245 (23 BITS) \	LOW = ENABLED										      	*/
PIN 40	= ADR_BUF_DIR_MB; 	/*	OUT		-> MOTHERBOARD ADDRESS BUFFER DIRECTION  \ 3 EA.74HCT245 (23 BITS) /	LOW = CPU ADDRESS -> MOTHERBOARD, HIGH = A590 ADDRESS -> CHIP-RAM OR SRAM	      	*/
PIN 41	= DATA_BUF_OE_MB; 	/*	OUT		-> MOTHERBOARD DATA BUFFER OUTPUT ENABLE	/ 2 EA.74HCT245 (16 BITS) \	LOW = ENABLED										      	*/
PIN 44	= DATA_BUF_DIR_MB; 	/*	OUT		-> MOTHERBOARD DATA BUFFER DIRECTION	\ 2 EA.74HCT245 (16 BITS) /	LOW = CPU DATA -> MOTHERBOARD, HIGH = MOTHERBOARD DATA -> CPU			      	*/

PIN 52	= SRAM_DATA_BUF_OE; 	/*	OUT		-> SRAM DATA BUFFER OUTPUT ENABLE		/ 2 EA.74LVC4245 (5V CPU (A) <-> (B) 3.3V SRAM)\ LOW = ENABLED						      	*/
PIN 55	= SRAM_DATA_BUF_DIR;	/*	OUT		-> SRAM DATA BUFFER DIRECTION		\ 2 EA.74LVC4245 (5V CPU (A) <-> (B) 3.3V SRAM)/ LOW = SRAM DATA -> CPU (RD), HIGH = CPU DATA -> SRAM (WR)   	*/
PIN 50	= SRAM_OE;		/*	OUT		-> SRAM OUTPUT ENABLE 			/ 1 EA.74LVC86 (5V CPU->3V3 SRAM) GATE WIRED AS NON-INV.BUFFER \ LOW = SRAM DATA OUTPUTS ENABLED (READ)	*/
PIN 49	= SRAM_WEH;		/*	OUT		-> SRAM UPPER DATA BYTE WRITE ENABLE	| 1 EA.74LVC86 (5V CPU->3V3 SRAM) GATE WIRED AS NON-INV.BUFFER | LOW = WRITE ENABLE UPPER BYTE 	  		*/
PIN 51	= SRAM_WEL;		/*	OUT		-> SRAM LOWER DATA BYTE WRITE ENABLE	\ 1 EA.74LVC86 (5V CPU->3V3 SRAM) GATE WIRED AS NON-INV.BUFFER / LOW = WRITE ENABLE LOWER BYTE 	  		*/
				/*									NOTE: SRAM ADDRESS LINES ARE BUFFERED USING 3 EA.74LVC540 DEVICES TO INTERFACE BETWEEN 5V CPU AND 3.3V SRAM.	*/
PIN 2	= CLK_OSC;		/*	IN		<- CLOCK FROM OSCILLATOR SOCKET		ASYNCHRONOUS CPU CLOCK													*/

PIN 65	= HIGH;		/*	IN		+5V (LOGIC HIGH)																				*/


/* BURIED REGISTER NODE NAMES: ** TYPE: ******* FUNCTION: ****************************** ADDITIONAL INFORMATION: ***************************************************************************************/

PINNODE = CLK_DIV;		/*	D-REGISTER	OSCILLATOR CLOCK DIVIDER			DIVIDES OSCILLATOR FREQUENCY BY 2, USED IN HALF SPEED MODE.								*/

PINNODE = AS_DLY; 	  	/*	D-REGISTER	DELAYED ADDRESS STROBE			USED WHEN ACCESSING MOTHERBOARD RESOURCES IN HALF AND FULL SPEED MODES.						*/
PINNODE = UDS_DLY; 	  	/*	D-REGISTER	DELAYED UPPER DATA STROBE			USED WHEN ACCESSING MOTHERBOARD RESOURCES IN HALF AND FULL SPEED MODES.						*/
PINNODE = LDS_DLY;	  	/*	D-REGISTER	DELAYED LOWER DATA STROBE			USED WHEN ACCESSING MOTHERBOARD RESOURCES IN HALF AND FULL SPEED MODES.						*/

PINNODE = E_CNT_Q0; 	 	/*	D-REGISTER	E-CLOCK SYNCHRONOUS DECADE COUNTER Q0 	-																*/
PINNODE = E_CNT_Q1;		/* 	D-REGISTER  	E-CLOCK SYNCHRONOUS DECADE COUNTER Q1	-																*/
PINNODE = E_CNT_Q2;		/*	D-REGISTER	E-CLOCK SYNCHRONOUS DECADE COUNTER Q2	-																*/
PINNODE = E_CNT_Q3;		/*	D-REGISTER	E-CLOCK SYNCHRONOUS DECADE COUNTER Q3	-USED FOR GENERATION OF E-CLOCK WITH THE CORRECT FREQ.AND DUTY CYCLE (NEEDED IN HALF AND HIGH SPEED MODES).	*/

PINNODE = VMA_DLY;		/*	D-REGISTER	DELAYED VALID MEMORY ACCESS			USED WHEN ACCESSING PERIPHERAL RESOURCES (CIA) IN HALF AND FULL SPEED MODES.					*/

PINNODE = DTACK_SRAM_CPU;	/*	D-REGISTER	DTACK - SRAM ACCESS(CPU)			USED FOR DTACK GENERATION WHEN CPU IS ACCESSING SRAM (FAST-RAM / FAST-ROM) OR CONFIG REGISTERS.			*/
PINNODE = DTACK_SRAM_A590; 	/*	D-REGISTER	DTACK - SRAM ACCESS (A590)			USED FOR DTACK GENERATION WHEN 0THER BUSMASTER / A590 IS ACCESSING SRAM (FAST-RAM).				*/
	
PINNODE = DTACK_TRIG_CIA;	/*	D-REGISTER	DTACK TRIGGER - CIA ACCESS			-																*/
PINNODE = DTACK_DLY_1_CIA;	/*	D-REGISTER	DTACK TRIGGER DELAY 1 - CIA ACCESS		-																*/
PINNODE = DTACK_DLY_2_CIA;	/*	D-REGISTER	DTACK TRIGGER DELAY 2 - CIA ACCESS		-																*/
PINNODE = DTACK_DLY_3_CIA;	/*	D-REGISTER	DTACK TRIGGER DELAY 3 - CIA ACCESS		-USED FOR DTACK GENERATION WHEN ACCESSING PERIPHERAL MOTHERBOARD RESOURCES (CIA) IN HALF & FULL SPEED MODES.	*/

PINNODE = DTACK_TRIG_MB;	/*	D-REGISTER	DTACK TRIGGER	- MOTHERBOARD ACCESS		-																*/
PINNODE = DTACK_DLY1_MB;	/*	D-REGISTER	DTACK TRIG.DELAY 1 - MOTHERBOARD ACCESS	-																*/
PINNODE = DTACK_DLY2_MB;	/*	D-REGISTER	DTACK TRIG.DELAY 2 - MOTHERBOARD ACCESS	-																*/
PINNODE = DTACK_DLY3_MB;	/*	D-REGISTER	DTACK TRIG.DELAY 3 - MOTHERBOARD ACCESS	-																*/
PINNODE = DTACK_DLY4_MB;	/*	D-REGISTER	DTACK TRIG.DELAY 4 - MOTHERBOARD ACCESS	-USED FOR DTACK GENERATION WHEN ACCESSING NON-PERIPHERAL MOTHERBOARD RESOURCES IN HALF AND FULL SPEED MODES.	*/

PINNODE = DTACK_CNT_Q0_MB;	/*	D-REGISTER	DTACK INTERVAL COUNTER Q0 -	MB.ACCESS	-																*/
PINNODE = DTACK_CNT_Q1_MB;	/*	D-REGISTER	DTACK INTERVAL COUNTER Q1 -	MB.ACCESS	-																*/
PINNODE = DTACK_CNT_SYNC;	/*	D-REGISTER	DTACK INTERVAL COUNTER SYNC./RESET		-USED FOR DTACK GENERATION WHEN ACCESSING NON-PERIPHERAL MOTHERBOARD RESOURCES IN HALF AND FULL SPEED MODES.	*/

PINNODE = BG_DLY;	      	/*	D-REGISTER	DELAYED BUS GRANT			 	USED IN HALF AND FULL SPEED MODES.												*/

PINNODE = ACS_SRAM;		/*	D-REGISTER	DETECT ACCESS TO SRAM 			SET DURING BEGINNING OF S2 WHEN ACCESSING SRAM.										*/
PINNODE = ACS_SROM;		/*	D-REGISTER	DETECT ACCESS TO FAST-ROM AREA IN SRAM	SET DURING BEGINNING OF S2 WHEN ACCESSING FAST-ROM ADDRESS SPACE IN SRAM.						*/
PINNODE = ACS_CFG;	  	/*	D-REGISTER	DETECT ACCESS TO CPLD CONFIG WORDS		SET DURING BEGINNING OF S2 WHEN ACCESSING ANY CONFIG REGISTER.							*/
PINNODE = ACS_CFG0;		/*	D-REGISTER	DETECT ACCESS TO CPLD CONFIG WORD 0	SET DURING BEGINNING OF S2 WHEN ACCESSING CONFIG REGISTER 0.								*/
PINNODE = ACS_CFG1;		/*	D-REGISTER	DETECT ACCESS TO CPLD CONFIG WORD 1	SET DURING BEGINNING OF S2 WHEN ACCESSING CONFIG REGISTER 1.								*/
PINNODE = ACS_CFG2;		/*	D-REGISTER	DETECT ACCESS TO CPLD CONFIG WORD 2	SET DURING BEGINNING OF S2 WHEN ACCESSING CONFIG REGISTER 2.								*/
PINNODE = ACS_CFG3;		/*	D-REGISTER	DETECT ACCESS TO CPLD CONFIG WORD 3	SET DURING BEGINNING OF S2 WHEN ACCESSING CONFIG REGISTER 3.								*/
PINNODE = ACS_MB;	  	/*	D-REGISTER	DETECT ACCESS TO MOTHERBOARD		SET DURING BEGINNING OF S2 WHEN ACCESSING MOTHERBOARD RESOURCES.							*/
PINNODE = ACS_CIA;	  	/*	D-REGISTER	DETECT ACCESS TO CIA-A OR CIA-B		SET DURING BEGINNING OF S2 WHEN ACCESSING MOTHERBOARD PERIPHERAL DEVICES (CIA).					*/
PINNODE = ACS_CIA_A_PRA;	/*	D-REGISTER	DETECT ACCESS CIA-A PRA REGISTER		SET DURING BEGINNING OF S2 WHEN ACCESSING CIA-A PRA REGISTER (FIRST WRITE TO PRA TURNS OFF FAST-ROM OVERLAY).	*/

PINNODE = OVL;		/*	D-REGISTER	ROM OVERLAY EMULATION			USED FOR ROM OVERLAY IF FAST-ROM IS ENABLED (REQUIRES ROM IMAGE IN BOTH 0xF80000-FFFFFF & 0x000000-0x07FFFF).	*/

PINNODE = CFG0_CLK_SEL0;	/*	D-REGISTER	CPLD CONFIG REG.0 BIT 12 (0xBFF0xx)	CPU CLOCK MODE_SELECT 0.													*/
PINNODE = CFG0_CLK_SEL1;	/*	D-REGISTER	CPLD CONFIG REG.0 BIT 13 (0xBFF0xx)	CPU CLOCK MODE_SELECT 1.													*/
PINNODE = CFG0_CFG_WRP_EN;	/*	D-REGISTER	CPLD CONFIG REG.0 BIT 14 (0xBFF0xx)	CONFIG WRITE-PROTECT ENABLE.												*/
PINNODE = CFG0_CFG_RSTP_EN;	/*	D-REGISTER	CPLD CONFIG REG.0 BIT 15 (0xBFF0xx)	CONFIG RESET-PROTECT ENABLE	.												*/

PINNODE = CFG1_SRAM_08_EN;	/*	D-REGISTER	CPLD CONFIG REG.1 BIT 12 (0xBFF4xx)	0x080000 - 0x0FFFFF SRAM (FAST-RAM) ENABLE (DOWNWARD FAST-RAM EXTENSION FOR A500s WITH 512KB CHIP RAM).	*/
PINNODE = CFG1_SRAM_DC_EN;	/*	D-REGISTER	CPLD CONFIG REG.1 BIT 13 (0xBFF4xx)	0xDC1000 - 0xDEFFFF SRAM (FAST-RAM) ENABLE.										*/
PINNODE = CFG1_SRAM_DF_EN;	/*	D-REGISTER	CPLD CONFIG REG.1 BIT 14 (0xBFF4xx)	0xDF0000 - 0xDFFFFF SRAM (FAST-RAM) ENABLE.										*/
PINNODE = CFG1_SRAM_E8_EN;	/*	D-REGISTER	CPLD CONFIG REG.1 BIT 15 (0xBFF4xx)	0xE80000 - 0xE8FFFF SRAM (FAST-RAM) ENABLE.										*/

PINNODE = CFG2_SRAM_00_EN;	/*	D-REGISTER	CPLD CONFIG REG.2 BIT 12 (0xBFF8xx)	0x000000 - 0x07FFFF SRAM (FAST-ROM OVERLAY) ENABLE.									*/
PINNODE = CFG2_SRAM_10_EN;	/*	D-REGISTER	CPLD CONFIG REG.2 BIT 13 (0xBFF8xx)	0x100000 - 0x1FFFFF SRAM (FAST-RAM) ENABLE (DOWNWARD FAST-RAM EXTENSION FOR A500s WITH 1MB OR LESS CHIP RAM).	*/
PINNODE = CFG2_SRAM_F8_EN;	/*	D-REGISTER	CPLD CONFIG REG.2 BIT 14 (0xBFF8xx)	0xF80000 - 0xFFFFFF SRAM (FAST-ROM) ENABLE.										*/
PINNODE = CFG2_SROM_WRP_EN;	/*	D-REGISTER	CPLD CONFIG REG.2 BIT 15 (0xBFF8xx)	FAST-ROM WRITE PROTECT ENABLE.												*/

PINNODE = CFG3_SRAM_F0_EN;	/*	D-REGISTER	CPLD CONFIG REG.3 BIT 12 (0xBFFCxx)	0xF00000 - 0xF7FFFF SRAM ENABLE.												*/

PINNODE = RST_DET_CNT_Q00;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q0  	-																*/
PINNODE = RST_DET_CNT_Q01;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q1 	-																*/
PINNODE = RST_DET_CNT_Q02;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q2 	-																*/
PINNODE = RST_DET_CNT_Q03;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q3 	-																*/
PINNODE = RST_DET_CNT_Q04;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q4 	-																*/
PINNODE = RST_DET_CNT_Q05;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q5 	-																*/
PINNODE = RST_DET_CNT_Q06;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q6 	-																*/
PINNODE = RST_DET_CNT_Q07;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q7 	-																*/
PINNODE = RST_DET_CNT_Q08;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q8 	-																*/
PINNODE = RST_DET_CNT_Q09;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q9 	-																*/
PINNODE = RST_DET_CNT_Q10;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q10 	-																*/
PINNODE = RST_DET_CNT_Q11;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q11 	-																*/
PINNODE = RST_DET_CNT_Q12;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q12 	-																*/
PINNODE = RST_DET_CNT_Q13;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q13 	-																*/
PINNODE = RST_DET_CNT_Q14;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q14 	-																*/
PINNODE = RST_DET_CNT_Q15;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q15 	-																*/
PINNODE = RST_DET_CNT_Q16;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q16 	-																*/
PINNODE = RST_DET_CNT_Q17;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q17 	-																*/
PINNODE = RST_DET_CNT_Q18;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q18 	-																*/
PINNODE = RST_DET_CNT_Q19;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q19 	-																*/
PINNODE = RST_DET_CNT_Q20;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q20 	-																*/
PINNODE = RST_DET_CNT_Q21;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q21 	-																*/
PINNODE = RST_DET_CNT_Q22;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q22 	-																*/
PINNODE = RST_DET_CNT_Q23;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q23 	-																*/
PINNODE = RST_DET_CNT_Q24;	/*	D-REGISTER	LONG RESET DETECT RIPPLE COUNTER Q24 	-USED FOR DETECTION OF LONG RESETS (2 SECONDS).										*/


/******************* LOGIC EQUATIONS *******************************************************************************************************************************************************************/

/*******************	CLOCKS ( CLK_CPU / E_MB ) *********************************************************************************************************************************************************/

CLK_CPU		=	 CLK_DIV & !CFG0_CLK_SEL0 & !CFG0_CLK_SEL1 #			/*	CPU CLOCK SELECTION = 	HALF SPEED MODE (OSC.FREQUENCY / 2)	OR			 		*/
				 CLK_OSC &  CFG0_CLK_SEL0 #						/*					FULL SPEED MODE (OSC.FREQUENCY)		OR					*/
				 CLK_MB  & !CFG0_CLK_SEL0 &  CFG0_CLK_SEL1;			/*					STOCK SPEED MODE (MOTHERBOARD 7M CLOCK)						*/

CLK_DIV.D		=	!CLK_DIV;								/*	DIVIDES OSC.FREQUENCY IN 2 FOR HALF SPEED CLOCK MODE.								*/
CLK_DIV.CK		=	 CLK_OSC;


E_CNT_Q0.D 		= 	!E_CNT_Q0;								/* 	4-BIT SYNCRONOUS COUNTER USED FOR GENERATION OF E-CLOCK FOR PERIPHERAL DEVICES (CIA-A / CIA-B).		*/
E_CNT_Q0.CK 		=	!CLK_MB;								/* 	COUNTS FROM 0-9, AND IS CLOCKED FROM INVERTED MOTHERBOARD 7M. THIS E-CLOCK IS USED INSTEAD OF CPU 	*/
													/*	GENERATED E-CLOCK IN HALF AND FULL SPEED MODES, TO MAINTAIN CORRECT E-CLK FREQ.FOR PERIPHERAL DEVICES.	*/
E_CNT_Q1.D 		=	!E_CNT_Q3 & !E_CNT_Q1 & E_CNT_Q0	#	
       			 E_CNT_Q1 & !E_CNT_Q0;
E_CNT_Q1.CK 		= 	!CLK_MB;

E_CNT_Q2.D 		= 	!E_CNT_Q2 &  E_CNT_Q1 & E_CNT_Q0	#
				 E_CNT_Q2 & !E_CNT_Q1		#
				 E_CNT_Q2 & !E_CNT_Q0;
E_CNT_Q2.CK 		= 	!CLK_MB;

E_CNT_Q3.D 		=	 E_CNT_Q2 &  E_CNT_Q1 & E_CNT_Q0 	#
				 E_CNT_Q3 & !E_CNT_Q0;

E_CNT_Q3.CK		= 	!CLK_MB;

E_MB 			=	!(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0) & E_CNT_Q2 & E_CNT_Q1 #	/* 	E-CLOCK OUTPUT TO MOTHERBOARD IN HALF & FULL SPEED MODES: LOW AT COUNT STATE 0-5, & HIGH AT STATE 6-9.	*/
    	 			!(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0) & E_CNT_Q3 		 #	
				  CFG0_CLK_SEL1 & !CFG0_CLK_SEL0  & E_CPU;			/*	E-CLOCK OUTPUT TO MOTHERBOARD IN STOCK SPEED MODE: CPU GENERATED E-CLK IS PASSED UNCHANGED TO MB SIDE.	*/


/******************* READ/WRITE ( RW_CPU / RW_MOB ) ****************************************************************************************************************************************************/

RW_MB			= 	 RW_CPU;								/*	THE READ / WRITE SIGNAL FROM CPU SIDE IS PASSED UNCHANGED TO THE MOTHERBOARD SIDE.				*/
RW_MB.OE		=	 BGACK_MB;								/*	THIS OUTPUT IS ENABLED ONLY WHILE CPU IS BUS MASTER (ELSE 3-STATED).						*/

RW_CPU			=	 RW_MB;								/*	THE READ / WRITE SIGNAL FROM MOTHERBOARD SIDE (A590) IS PASSED UNCHANGED TO CPU SIDE.			*/
RW_CPU.OE		=	!BGACK_MB;								/*	THIS OUTPUT IS ENABLED ONLY WHILE THE A590 IS BUS MASTER (ELSE 3-STATED).					*/


/*******************	ADDRESS STROBE ( AS_CPU / AS_MB ) **************************************************************************************************************************************************/

AS_MB 			= 	!(ACS_MB & !AS_CPU &	  CFG0_CLK_SEL1 & !CFG0_CLK_SEL0	#	/*	WHEN CPU IS ACCESSING A MOTHERBOARD RESOURCE IN STOCK SPEED MODE, THE CPU ADDRESS STROBE SIGNAL IS 	*/
													/*	PASSED UNCHANGED TO THE MOTHERBOARD SIDE.										*/
				  ACS_MB &  AS_DLY &	!(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0) );  	/*	WHEN CPU IS ACCESSING A MOTHERBOARD RESOURCE IN HALF OR FULL SPEED MODE, THE DELAYED ADDRESS STROBE 	*/
													/*	SIGNAL IS PASSED TO THE MOTHERBOARD SIDE INSTEAD. 								*/
AS_MB.OE		=	 BGACK_MB;								/*	THE MOTHERBOARD SIDE ADDRESS STROBE OUTPUT IS ENABLED ONLY WHILE THE CPU IS BUS MASTER (ELSE 3-STATED).*/			

AS_CPU			=	 AS_MB;								/*	WHEN THE A590 IS BUS MASTER, ITS ADR.STROBE SIGNAL WILL ALWAYS BE PASSED UNCHANGED TO THE CPU SIDE.	*/
AS_CPU.OE		=	!BGACK_MB;								/*	THE CPU SIDE ADDRESS STROBE OUTPUT IS ONLY ENABLED WHILE THE A590 IS BUS MASTER (ELSE 3-STATED).	*/

AS_DLY.D		=	!AS_CPU;								/*	DELAYED ADDRESS STROBE. THE CPU ADDRESS STROBE IS SYNCHRONIZED TO THE 7M CLOCK.				*/
AS_DLY.CK		=	 CLK_MB;								
AS_DLY.AR		=	 AS_CPU;								


/*******************	DATA STROBES ( UDS_CPU / LDS_CPU / UDS_MB / LDS_MB ) *******************************************************************************************************************************/

UDS_MB			=	!(ACS_MB & !UDS_CPU &   CFG0_CLK_SEL1 & !CFG0_CLK_SEL0	 #	/*	WHEN CPU IS ACCESSING A MOTHERBOARD RESOURCE IN STOCK SPEED MODE, THE CPU UPPER DATA STROBE SIGNAL IS 	*/
													/*	PASSED UNCHANGED TO THE MOTHERBOARD SIDE.										*/
				  ACS_MB &  UDS_DLY & !(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0) );	/*	WHEN CPU IS ACCESSING A MOTHERBOARD RESOURCE IN HALF OR FULL SPEED MODE, THE DELAYED UPPER DATA STROBE	*/
				  									/*	SIGNAL IS PASSED TO THE MOTHERBOARD SIDE INSTEAD. 								*/
UDS_MB.OE		=	  BGACK_MB;								/*	THE MB SIDE UPPER DATA STROBE OUTPUT IS ENABLED ONLY WHILE THE CPU IS BUS MASTER (ELSE 3-STATED).	*/			
																													
UDS_CPU		=	 UDS_MB;								/*	WHEN THE A590 IS BUS MASTER, ITS UPPER DATA STROBE WILL ALWAYS BE PASSED UNCHANGED TO THE CPU SIDE. 	*/			
UDS_CPU.OE		=	!BGACK_MB;								/* 	THE CPU SIDE UPPER DATA STROBE OUTPUT IS ONLY ENABLED WHILE THE A590 IS BUS MASTER (ELSE 3-STATED).	*/

UDS_DLY.D		=	!UDS_CPU;								/*	DELAYED UPPER DATA STROBE. THE CPU UPPER DATA STROBE IS SYNCHRONIZED TO THE 7M CLOCK.			*/
UDS_DLY.CK		=	 CLK_MB;								
UDS_DLY.AR		=	 AS_CPU;

LDS_MB			=	!(ACS_MB & !LDS_CPU &   CFG0_CLK_SEL1 & !CFG0_CLK_SEL0	 #	/*	WHEN CPU IS ACCESSING A MOTHERBOARD RESOURCE IN STOCK SPEED MODE, THE CPU LOWER DATA STROBE SIGNAL IS 	*/
													/*	PASSED UNCHANGED TO THE MOTHERBOARD SIDE.										*/
				  ACS_MB &  LDS_DLY & !(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0) );	/*	WHEN CPU IS ACCESSING A MOTHERBOARD RESOURCE IN HALF OR FULL SPEED MODE, THE DELAYED LOWER DATA STROBE	*/
				  									/*	SIGNAL IS PASSED TO THE MOTHERBOARD SIDE INSTEAD. 								*/
LDS_MB.OE		=	  BGACK_MB;								/*	THE MB SIDE LOWER DATA STROBE OUTPUT IS ENABLED ONLY WHILE THE CPU IS BUS MASTER (ELSE 3-STATED).	*/			
																													
LDS_CPU		=	 LDS_MB;								/*	WHEN THE A590 IS BUS MASTER, ITS LOWER DATA STROBE WILL ALWAYS BE PASSED UNCHANGED TO THE CPU SIDE. 	*/			
LDS_CPU.OE		=	!BGACK_MB;								/* 	THE CPU SIDE LOWER DATA STROBE OUTPUT IS ONLY ENABLED WHILE THE A590 IS BUS MASTER (ELSE 3-STATED).	*/

LDS_DLY.D		=	!LDS_CPU;								/*	DELAYED LOWER DATA STROBE. THE CPU LOWER DATA STROBE IS SYNCHRONIZED TO THE 7M CLOCK.			*/
LDS_DLY.CK		=	 CLK_MB;								
LDS_DLY.AR		=	 AS_CPU;


/*******************	PERIPHERAL ACCESS ( VPA_CPU / VMA_MB ) *********************************************************************************************************************************************/

!VPA_CPU		=	!VPA_MB & CFG0_CLK_SEL1 & !CFG0_CLK_SEL0	# 			/* 	WHEN CPU IS ACCESSING PERIPHERAL DEVICE (CIA) IN STOCK SPEED MODE, THE VPA SIGNAL FROM MOTHERBOARD   	*/
			 	!HIGH & !(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0); 			/*	SIDE IS PASSED UNCHANGED TO THE CPU SIDE. IN OTHER SPEED MODES THE VPA SIGNAL IS NOT USED, AS THE	*/
													/*	PERIPHERAL CYCLE IS CONVERTED INTO A REGULAR (DTACK) CYCLE.							*/

!VMA_MB		=	!VMA_CPU &   CFG0_CLK_SEL1 & !CFG0_CLK_SEL0 #			/*	IN STOCK SPEED MODE, THE CPU VMA SIGNAL IS PASSED UNCHANGED TO THE MOTHERBOARD SIDE.			*/
				 VMA_DLY & !(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0);			/*	IN HALF AND FULL SPEED MODES, THE DELAYED VMA SIGNAL IS PASSED TO THE MOTHERBOARD SIDE INSTEAD.		*/
				  
VMA_DLY.D 		=	!E_CNT_Q3 & !E_CNT_Q2 & E_CNT_Q1 & E_CNT_Q0 & !VPA_MB 	#	/*	DELAYED VMA SIGNAL GENERATION. ASSERTED WHEN THE SYNCHRONOUS E-CLOCK COUNTER STATE = 3 DURING THE  	*/
				 E_CNT_Q2 & VMA_DLY 						#	/*	RISING EDGE OF THE 7M CLOCK, AND STAYS ASSERTED UNTIL VPA FROM MOTHERBOARD IS DE-ASSERTED, OR COUNTER 	*/
				 E_CNT_Q3 & VMA_DLY;							/*	ROLLS OVER FROM 9 TO 0, WHICHEVER HAPPENS FIRST.								*/
VMA_DLY.CK 		=	 CLK_MB;
VMA_DLY.AR		=	 VPA_MB;


/*******************	DATA ACKNOWLEDGE ( DTACK_CPU / DTACK_MB )  *****************************************************************************************************************************************/

!DTACK_CPU		=	 ACS_SRAM &  DTACK_SRAM_CPU  							# 	/*	DTACK FOR ACCESS TO SRAM IN ALL CLOCK MODES.						*/
				 ACS_MB   & !DTACK_MB &  			CFG0_CLK_SEL1 & !CFG0_CLK_SEL0	#	/*	DTACK FOR ACCESS TO MOTHERBOARD RESOURCE IN STOCK SPEED MODE.				*/ 
			 	 ACS_MB   & !ACS_CIA & DTACK_DLY2_MB &  !CFG0_CLK_SEL1 & !CFG0_CLK_SEL0	#	/*	DTACK FOR ACCESS TO NON-CIA MOTHERBOARD RESOURCE IN HALF SPEED MODE.			*/
				 ACS_MB   & !ACS_CIA & DTACK_DLY4_MB &   CFG0_CLK_SEL0 			#	/*	DTACK FOR ACCESS TO NON-CIA MOTHERBOARD RESOURCE IN FULL SPEED MODE.			*/	
				 ACS_CIA  &  DTACK_DLY_2_CIA & 	      !CFG0_CLK_SEL0 & !CFG0_CLK_SEL1 	#	/*	DTACK FOR ACCESS TO MOTHERBOARD CIA IN HALF SPEED MODE.				*/
				 ACS_CIA  &  DTACK_DLY_3_CIA &  		CFG0_CLK_SEL0 			;	/*	DTACK FOR ACCESS TO MOTHERBOARD CIA IN FULL SPEED MODE.				*/ 

DTACK_SRAM_A590.D	=	!DEC_MB;											/*	DTACK FOR A590 WHEN IT IS ACCESSING SRAM/FAST-RAM.					*/
DTACK_SRAM_A590.CK	=	 CLK_MB;
DTACK_SRAM_A590.AR	=	 AS_MB;

DTACK_SRAM_CPU.D	=	 HIGH;												/*	DTACK FOR CPU WHEN IT IS ACCESSING SRAM/FAST-RAM/FAST-ROM.				*/
DTACK_SRAM_CPU.CK	=	 CLK_CPU;
DTACK_SRAM_CPU.AR	=	 AS_CPU;

DTACK_TRIG_CIA.D	=	!AS_MB & VMA_DLY & E_CNT_Q3 & !E_CNT_Q2 & !E_CNT_Q1 & E_CNT_Q0 #			/*	TRIGGER FOR CIA DTACK GENERATION (FOR CPU ACCESS IN HALF & FULL SPEED MODES).	*/ 
				 DTACK_TRIG_CIA;
DTACK_TRIG_CIA.CK	=	 CLK_MB;
DTACK_TRIG_CIA.AR	=	 AS_MB #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY_1_CIA.D	=	 DTACK_TRIG_CIA;										/*	1ST.DELAYED CIA DTACK TRIGGER (FOR CPU ACCESS IN HALF & FULL SPEED MODES).		*/
DTACK_DLY_1_CIA.CK	=	 CLK_MB;
DTACK_DLY_1_CIA.AR	=	 AS_MB #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY_2_CIA.D	=	 DTACK_DLY_1_CIA;										/*	2ND.DELAYED CIA DTACK TRIGGER (FOR CPU ACCESS IN HALF & FULL SPEED MODES).		*/
DTACK_DLY_2_CIA.CK	=	 CLK_CPU;
DTACK_DLY_2_CIA.AR	=	 AS_MB #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY_3_CIA.D	=	 DTACK_DLY_2_CIA;										/*	3RD.DELAYED CIA DTACK TRIGGER (FOR CPU ACCESS IN HALF & FULL SPEED MODES).		*/
DTACK_DLY_3_CIA.CK	=	 CLK_CPU;
DTACK_DLY_3_CIA.AR	=	 AS_MB #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_TRIG_MB.D	=	!AS_CPU;											/*	TRIGGER FOR MB DTACK GENERATION (FOR CPU ACCESS IN HALF & FULL SPEED MODES).	*/
DTACK_TRIG_MB.CK	=	!DTACK_CNT_Q1_MB & !DTACK_CNT_Q0_MB & !CLK_MB & !DTACK_MB;
DTACK_TRIG_MB.AR	=	 AS_CPU #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY1_MB.D	=	 DTACK_TRIG_MB;										/*	1ST.DELAYED MB DTACK TRIGGER (FOR CPU ACCESS IN HALF AND FULL SPEED MODES).		*/
DTACK_DLY1_MB.CK	=	 CLK_MB;
DTACK_DLY1_MB.AR	=	 AS_CPU #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY2_MB.D	=	 DTACK_DLY1_MB;										/*	2ND.DELAYED MB DTACK TRIGGER (FOR CPU ACCESS IN HALF AND FULL SPEED MODES).		*/
DTACK_DLY2_MB.CK	=	 CLK_CPU;
DTACK_DLY2_MB.AR	=	 AS_CPU #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY3_MB.D	=	 DTACK_DLY2_MB;										/*	3RD.DELAYED MB DTACK TRIGGER (FOR CPU ACCESS IN HALF AND FULL SPEED MODES).		*/
DTACK_DLY3_MB.CK	=	 CLK_CPU;
DTACK_DLY3_MB.AR	=	 AS_CPU #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_DLY4_MB.D	=	 DTACK_DLY3_MB;										/*	4TH.DELAYED MB DTACK TRIGGER (FOR CPU ACCESS IN HALF AND FULL SPEED MODES).		*/
DTACK_DLY4_MB.CK	=	 CLK_CPU;
DTACK_DLY4_MB.AR	=	 AS_CPU #
				 RW_CPU & UDS_CPU & LDS_CPU;

DTACK_CNT_Q0_MB.D	=	!DTACK_CNT_Q0_MB;										/*	2-BIT SYNC COUNTER USED IN MOTHERBOARD DTACK TRIGGER.					*/
DTACK_CNT_Q0_MB.CK	=	 CLK_MB;
DTACK_CNT_Q0_MB.AR	=	 DTACK_CNT_SYNC;

DTACK_CNT_Q1_MB.D	=	!DTACK_CNT_Q1_MB &  DTACK_CNT_Q0_MB #
				 DTACK_CNT_Q1_MB & !DTACK_CNT_Q0_MB;
DTACK_CNT_Q1_MB.CK	=	 CLK_MB;
DTACK_CNT_Q1_MB.AR	=	 DTACK_CNT_SYNC;

DTACK_CNT_SYNC.D	=	 HIGH;												/*	SYNC SOURCE FOR 2-BIT DTACK SYNC COUNTER.							*/ 
DTACK_CNT_SYNC.CK	=	!DTACK_MB;
DTACK_CNT_SYNC.AR	=	!CLK_MB;

DTACK_MB		=	!HIGH;												/*	OPEN DRAIN DTACK OUTPUT FOR A590 - USED WHEN IT ACCESSES SRAM / FAST-RAM.		*/
DTACK_MB.OE		=	!BGACK_MB & DTACK_SRAM_A590;


/******************* BUS ARBITRATION ( BR_CPU / BG_MB / BGACK_CPU ) *************************************************************************************************************************************/

!BR_CPU		= 	!BR_MB;											/*	BUS REQUEST SIGNAL FROM MOTHERBOARD SIDE IS PASSED UNCHANGED TO CPU SIDE.		*/

!BG_MB			= 	!BG_CPU &   CFG0_CLK_SEL1 & !CFG0_CLK_SEL0 #						/*	IN STOCK SPEED MODE, THE CPU BUS GRANT SIGNAL IS PASSED UNCHANGED TO THE MB SIDE.	*/	
				 BG_DLY & !(CFG0_CLK_SEL1 & !CFG0_CLK_SEL0);						/*	IN HALF AND FULL SPEED MODES, THE DELAYED BUS GRANT SIGNAL IS PASSED TO MB SIDE.	*/

BG_DLY.D		=	!BG_CPU & AS_CPU & DTACK_CPU #								/*	DELAYED BUS GRANT SIGNAL GENERATION - USED IN HALF AND FULL SPEED MODES.		*/	
				 BG_DLY;
BG_DLY.CK		=	 CLK_MB;
BG_DLY.AR		=	 BG_CPU;

!BGACK_CPU		= 	!BGACK_MB;											/*	BUS GRANT ACKNOWLEDGE SIGNAL FROM MB SIDE IS ALWAYS PASSED UNCHANGED TO CPU SIDE.	*/


/*******************	SRAM DATA-BUFFERS & CONTROL-SIGNALS ( SRAM_DATA_BUF_OE / SRAM_DATA_BUF_DIR / SRAM_OE / SRAM_WEH / SRAM_WEL ) ***********************************************************************/

!SRAM_DATA_BUF_OE	=	 ACS_SRAM & !AS_CPU & !DEC_CFG;								/*	SRAM DATA BUFFERS CHIP ENABLE SIGNAL. 							*/
!SRAM_DATA_BUF_DIR	=	 RW_CPU;											/*	SRAM DATA BUFFERS DIRECTION SIGAL.								*/
!SRAM_OE		=	 ACS_SRAM & !AS_CPU &  RW_CPU;								/*	SRAM DATA BUFFERS OUTPUT ENABLE SIGNAL.							*/
!SRAM_WEH		=	 ACS_SRAM & !AS_CPU & !RW_CPU & !UDS_CPU & !ACS_SROM #					/*	SRAM WRITE ENABLE SIGNAL (HIGH BYTE).							*/
				 ACS_SROM & !AS_CPU & !RW_CPU & !UDS_CPU & !CFG2_SROM_WRP_EN;
!SRAM_WEL		=	 ACS_SRAM & !AS_CPU & !RW_CPU & !LDS_CPU & !ACS_SROM #					/*	SRAM WRITE ENABLE SIGNAL (LOW BYTE).							*/
				 ACS_SROM & !AS_CPU & !RW_CPU & !LDS_CPU & !CFG2_SROM_WRP_EN;


/*******************	MOTHERBOARD ADDRESS & DATA-BUFFERS ( ADR_BUF_OE_MB / ADR_BUF_DIR_MB / DATA_BUF_OE_MB / DATA_BUF_DIR_MB ) ***************************************************************************/

!ADR_BUF_OE_MB	=	 HIGH;												/*	MOTHERBOARD ADDRESS BUFFERS OUTPUT ENABLE SIGNAL (ALWAYS ENABLED).			*/

!ADR_BUF_DIR_MB	=	 BGACK_MB;											/*	MOTHERBOARD ADDRESS BUFFERS DIRECTION SIGNAL: CPU SIDE -> MB SIDE WHEN CPU IS 	*/
																/*	BUS MASTER, MB SIDE -> CPU SIDE WHEN A590 IS BUS-MASTER.				*/			

!DATA_BUF_OE_MB	=	 BGACK_MB &  ACS_MB #									/*	MOTHERBOARD DATA BUFFERS OUTPUT ENABLE SIGNAL.						*/
				!BGACK_MB;

!DATA_BUF_DIR_MB	=	 BGACK_MB & !RW_CPU #									/*	MOTHERBOARD DATA BUF.DIRECTION SIGNAL: CPU SIDE -> MB SIDE / MB SIDE -> CPU SIDE 	*/
																/*	WHEN CPU IS BUS MASTER AND WRITING / READING TO / FROM A MOTHERBOARD RESOURCE.	*/	
				!BGACK_MB &  RW_CPU;										/*	A590 SIDE -> CPU SIDE / CPU SIDE -> A590 SIDE WHEN A590 IS BUS MASTER AND 		*/
																/*	WRITING / READING.										*/ 


/******************* ADDRESS DECODE & ACCESS DETECT  ***************************************************************************************************************************************************/

/*				 ADDRESS DECODING OF ALL NON FAST-RAM MOTHERBOARD RESOURCES																	*/
DEC_MB			=	 DEC_CHIP		#											/* DECODE 0x000000 - 0x1FFFFF (CHIP-RAM)		 			2048KB	*/
				 DEC_CIA_B 		# 											/* DECODE 0xBFD000 - 0xBFDFFF (CIA-B) 					4KB 	*/
				 DEC_CIA_A 		#											/* DECODE 0xBFE000 - 0xBFEFFF (CIA-A) 					4KB	*/
				 DEC_RTC 		#											/* DECODE 0xDC0000 - 0xDCFFFF (REAL TIME CLOCK)				64KB 	*/
				 DEC_CUSTOM 		#											/* DECODE 0xDF0000 - 0xDFFFFF (CUSTOM CHIPS & 60KB AREA BELOW)	64KB 	*/
				 DEC_AUTOCFG_P 	#											/* DECODE 0xE80000 - 0xE8FFFF (PRIMARY AUTOCONFIG SPACE)		64KB	*/
				 DEC_AUTOCFG_S 	#											/* DECODE 0xE90000 - 0xE9FFFF (FIRST 64K OF SEC.AUTOCONFIG SPACE)   	64KB	*/
				 DEC_F0		#											/* DECODE 0xF00000 - 0xF7FFFF (EXTENDED ROM SPACE)			512KB	*/
				 DEC_ROM;													/* DECODE 0xF80000 - 0xFFFFFF (PRIMARY ROM SPACE)			512KB	*/

DEC_CHIP		=	!A23 & !A22 & !A21 & !A20 & !A19 & !CFG2_SRAM_00_EN & !OVL 	#					/* DECODE 0x000000 - 0x07FFFF (CHIP-RAM LO)		 		512KB	*/
				!A23 & !A22 & !A21 & !A20 &  A19 & !CFG1_SRAM_08_EN     	#					/* DECODE 0x080000 - 0x0FFFFF (CHIP-RAM HI)		 		512KB	*/
				!A23 & !A22 & !A21 &  A20 & 	 !CFG2_SRAM_10_EN;							/* DECODE 0x100000 - 0x1FFFFF (CHIP-RAM UPPER)		 		1024KB	*/

DEC_CIA_B		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 & !A13 &  A12 ;			/* DECODE 0xBFD000 - 0xBFDFFF (CIA-B) 					4KB 	*/
DEC_CIA_A		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 &  A13 & !A12 ;			/* DECODE 0xBFE000 - 0xBFEFFF (CIA-A) 					4KB	*/
DEC_CIA_A_PRA		=	 DEC_CIA_A &  !A11 & !A10 & !A9  & !A8 ;									/* DECODE 0xBFE000 - 0xBFE0FF (CIA-A PRA)					-	*/

DEC_CFG		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 &  A13 &  A12;			/* DECODE 0xBFF000 - 0xBFFFFF (CFG WORD 0/1/2)				4KB	*/
DEC_CFG0		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 &  A13 &  A12 & !A11 & !A10;	/* DECODE 0xBFF000 - 0xBFF3FF (CFG WORD 0)				1KB	*/
DEC_CFG1		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 &  A13 &  A12 & !A11 &  A10;	/* DECODE 0xBFF400 - 0xBFF7FF (CFG WORD 1)				1KB	*/
DEC_CFG2		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 &  A13 &  A12 &  A11 & !A10;	/* DECODE 0xBFF800 - 0xBFFBFF (CFG WORD 2)				1KB	*/
DEC_CFG3		=	 A23 & !A22 &  A21 &  A20 &  A19 &  A18 &  A17 &  A16 & A15 & A14 &  A13 &  A12 &  A11 &  A10;	/* DECODE 0xBFFC00 - 0xBFFFFF (CFG WORD 3)				1KB	*/

DEC_RTC		=	 A23 &  A22 & !A21 &  A20 &  A19 &  A18 & !A17 & !A16 & !A15 & !A14 & !A13 & !A12  #		/* DECODE 0xDC0000 - 0xDC0FFF (ACTUAL REAL TIME CLOCK AREA) OR	4KB 	*/
				 A23 &  A22 & !A21 &  A20 &  A19 &  A18 & !A17 & !A16 & !CFG1_SRAM_DC_EN;				/* DECODE 0xDC0000 - 0xDCFFFF (OFFICIAL REAL TIME CLOCK AREA)		64KB 	*/

DEC_CUSTOM		=	 A23 &  A22 & !A21 &  A20 &  A19 &  A18 &  A17 &  A16 &  A15 &  A14 &  A13 &  A12 #		/* DECODE 0xDFF000 - 0xDFFFFF (CUSTOM CHIPS AREA) OR			64KB 	*/
				 A23 &  A22 & !A21 &  A20 &  A19 &  A18 &  A17 &  A16 & !CFG1_SRAM_DF_EN;				/* DECODE 0xDF0000 - 0xDFFFFF (CUSTOM CHIPS AREA & 60KB AREA BELOW)	64KB 	*/

DEC_AUTOCFG_P		=	 A23 &  A22 &  A21 & !A20 &  A19 & !A18 & !A17 & !A16 & !CFG1_SRAM_E8_EN;				/* DECODE 0xE80000 - 0xE8FFFF (PRIMARY AUTOCONFIG SPACE)		64KB	*/

DEC_AUTOCFG_S		=	 A23 &  A22 &  A21 & !A20 &  A19 & !A18 & !A17 &  A16;							/* DECODE 0xE90000 - 0xE9FFFF (FIRST 64K OF SEC.AUTOCONFIG SPACE)	64KB	*/

DEC_F0			=	 A23 &  A22 &  A21 &  A20 & !A19 & !CFG3_SRAM_F0_EN;							/* DECODE 0xF00000 - 0xF7FFFF (EXTENDED ROM SPACE)			512KB	*/
DEC_ROM		=	 A23 &  A22 &  A21 &  A20 &  A19 & !CFG2_SRAM_F8_EN;							/* DECODE 0xF80000 - 0xFFFFFF (PRIMARY ROM SPACE)			512KB	*/


ACS_MB.D		=	 DEC_MB;													/* LATCH READ / WRITE  ACCESS TO ANY NON FAST-RAM MOTHERBOARD RESOURCE	*/
ACS_MB.CK		=	!AS_CPU &  BGACK_MB #											/* WHILE CPU IS BUS MASTER OR							*/
				!AS_MB  & !BGACK_MB;												/* WHILE A590 IS BUS MASTER								*/

ACS_SRAM.D		=	!DEC_MB;													/* LATCH ACCESS TO FAST-RAM / SRAM (EVERYTHING NOT A MOTHERBOARD RESOURCE)	*/
ACS_SRAM.CK		= 	!AS_CPU &  BGACK_MB #											/* WHILE CPU IS BUS MASTER OR							*/
				!AS_MB  & !BGACK_MB;												/* WHILE A590 IS BUS MASTER								*/

ACS_SROM.D		=	 A23 &  A22 &  A21 &  A20 & A19;										/* LATCH READ / WRITE ACCESS TO FAST ROM (ROM SPACE IN SRAM)			*/
ACS_SROM.CK		=	!AS_CPU;

ACS_CIA.D		=	 DEC_CIA_A # 													/* LATCH READ / WRITE ACCESS TO CIA A OR CIA B					*/
				 DEC_CIA_B;
ACS_CIA.CK		=	!AS_CPU;

ACS_CIA_A_PRA.D	=	 DEC_CIA_A_PRA;												/* LATCH WRITE ACCESS TO CIA A PRA REGISTER (USED TO CLEAR ROM OVERLAY)	*/
ACS_CIA_A_PRA.CK	=	!AS_CPU & !RW_CPU;
ACS_CIA_A_PRA.AR	=	!RST_MB;

OVL.D			=	 HIGH;														/* LATCH ROM OVERLAY STATE DURING RESET IF FAST ROM IS ENABLED.		*/
OVL.CK			=	!RST_MB & CFG2_SRAM_F8_EN & CLK_CPU;										
OVL.AR			=	 ACS_CIA_A_PRA #												/* ROM OVERLAY STATE IS CLEARED WHEN ACCESS TO CIA-A PRAA IS LATCHED, OR	*/
				 RST_DET_CNT_Q24;												/* WHEN LONG RESET IS DETECTED.							*/

ACS_CFG.D		=	 DEC_CFG;													/* LATCH READ / WRITE ACCESS TO CONFIG WORD 0 / 1 / 2.				*/
ACS_CFG.CK		=	!AS_CPU & !CLK_CPU;

ACS_CFG0.D		=	 DEC_CFG0;													/* LATCH READ / WRITE ACCESS TO CONFIG WORD 0					*/
ACS_CFG0.CK		=	!AS_CPU & !CLK_CPU;

ACS_CFG1.D		=	 DEC_CFG1;													/* LATCH READ / WRITE ACCESS TO CONFIG WORD 1					*/
ACS_CFG1.CK		=	!AS_CPU & !CLK_CPU;

ACS_CFG2.D		=	 DEC_CFG2;													/* LATCH READ / WRITE ACCESS TO CONFIG WORD 2					*/
ACS_CFG2.CK		=	!AS_CPU & !CLK_CPU;

ACS_CFG3.D		=	 DEC_CFG3;													/* LATCH READ / WRITE ACCESS TO CONFIG WORD 3					*/
ACS_CFG3.CK		=	!AS_CPU & !CLK_CPU;

OVR_MB			=	!HIGH;														/* ASSERT MOTHERBOARD OVERRIDE OPEN DRAIN OUTPUT WHEN ACCESS TO		*/
OVR_MB.OE		=	!DEC_MB;													/* NON-MOTHERBOARD RESOURCES (FAST-RAM / SRAM / SROM) IS DETECTED.		*/


/*******************	CONFIG BIT REGISTERS **************************************************************************************************************************************************************/

/* 				 CONFIG REGISTER 0 WRITE (0xBFF000 - 0xBFF3FF)										 									*/
CFG0_CLK_SEL0.D	=	 D12;								/* D12	D13	CPU CLOCK MODE SELECT.												*/
CFG0_CLK_SEL0.CK	=	 ACS_CFG0 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 0	0:	HALF SPEED MODE (OSC.FREQUENCY / 2).										*/
CFG0_CLK_SEL0.AR	=	 RST_DET_CNT_Q24 #						/* 1	0:	FULL SPEED MODE (OSC.FREQUENCY). NOTE: CHANGES BACK TO HALF SPEED MODE DURING RESET (D12 IS CLEARED).	*/
				!RST_MB  & !CFG0_CLK_SEL1;	 				/* 1	1:	FULL SPEED MODE (OSC.FREQUENCY). (ONLY USE WHILE A590 BOOT IS DISABLED).					*/
												/* 0	1:	MOTHERBOARD CLOCK.													*/
CFG0_CLK_SEL1.D	=	 D13;								/*																	*/
CFG0_CLK_SEL1.CK	=	 ACS_CFG0 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/*																	*/
CFG0_CLK_SEL1.AR	=	 RST_DET_CNT_Q24;
												/* D14		CONFIG WRITE PROTECT.												*/
CFG0_CFG_WRP_EN.D	=	 D14;								/* 0:		CONFIG CAN BE WRITTEN.												*/
CFG0_CFG_WRP_EN.CK	=	 ACS_CFG0 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		CONFIG WRITES ARE BLOCKED, INCLUDING THIS BIT (CLEARED DURING RESET UNLESS CFG0_CFG_RSTP_EN IS SET).	*/
CFG0_CFG_WRP_EN.AR	=	!RST_MB  & !CFG0_CFG_RSTP_EN #
				 RST_DET_CNT_Q24;						
												/* D15		CONFIG RESET PROTECT.												*/
CFG0_CFG_RSTP_EN.D	=	 D15;								/* 0:		CONFIG WRITE PROTECT BIT (CFG0_CFG_WRP_EN) IS CLEARED DURING RESET.						*/
CFG0_CFG_RSTP_EN.CK	=	 ACS_CFG0 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		CONFIG WRITE PROTECT BIT (CFG0_CFG_WRP_EN) IS MAINTAINED DURING RESET.					*/
CFG0_CFG_RSTP_EN.AR	=	 RST_DET_CNT_Q24;

/* 				 CONFIG REGISTER 1 WRITE (0xBFF400 - 0xBFF7FF)  	D12		FAST-RAM 0x080000 - 0x0FFFFF ENABLE.										*/
CFG1_SRAM_08_EN.D	=	 D12;								/* 0:		FAST-RAM IS DISABLED.												*/
CFG1_SRAM_08_EN.CK	=	 ACS_CFG1 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN #	/* 1:		FAST-RAM IS ENABLED (CLEARED DURING RESET).									*/
				 ACS_CFG1 & !RW_CPU & !UDS_CPU &  CFG0_CFG_WRP_EN & D12;
CFG1_SRAM_08_EN.AR	=	!RST_MB;
												/* D13		FAST-RAM 0xDC1000 - 0xDCFFFF ENABLE.										*/
CFG1_SRAM_DC_EN.D	=	 D13;								/* 0:		FAST-RAM IS DISABLED.												*/
CFG1_SRAM_DC_EN.CK	=	 ACS_CFG1 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-RAM IS ENABLED (CLEARED DURING RESET).									*/
CFG1_SRAM_DC_EN.AR	=	!RST_MB;
												/* D14		FAST-RAM 0xDF0000 - 0xDFEFFF ENABLE	.									*/
CFG1_SRAM_DF_EN.D	=	 D14;								/* 0:  	FAST-RAM IS DISABLED.												*/
CFG1_SRAM_DF_EN.CK	=	 ACS_CFG1 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-RAM IS ENABLED (CLEARED DURING RESET).									*/
CFG1_SRAM_DF_EN.AR	=	!RST_MB;
												/* D15		FAST-RAM 0xE80000 - 0xE8FFFF ENABLE.										*/
CFG1_SRAM_E8_EN.D	=	 D15;								/* 0:		FAST-RAM IS DISABLED.												*/
CFG1_SRAM_E8_EN.CK	=	 ACS_CFG1 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-RAM IS ENABLED (CLEARED DURING RESET).							 		*/
CFG1_SRAM_E8_EN.AR	=	!RST_MB;

/* 				 CONFIG REGISTER 2 WRITE (0xBFF800 - 0xBFFBFF) 		 D12		FAST-RAM 0x000000 - 0x0FFFFF (ONLY ENABLE DURING ROM OVERLAY COPY LOOP).					*/
CFG2_SRAM_00_EN.D	=	 D12;								/* 0:		FAST-RAM IS DISABLED.												*/
CFG2_SRAM_00_EN.CK	=	 ACS_CFG2 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-RAM IS ENABLED.													*/
CFG2_SRAM_00_EN.AR	=	!RST_MB;
												/* D13		FAST-RAM 0x100000 - 0x1FFFFF (USE ONLY ON MACHINES WITH MAX 1MB CHIP-RAM).					*/
CFG2_SRAM_10_EN.D	=	 D13;								/* 0: 		FAST-RAM IS DISABLED.												*/
CFG2_SRAM_10_EN.CK	=	 ACS_CFG2 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN # 	/* 1:		FAST-RAM IS ENABLED (CLEARED DURING RESET TO AVOID BEEING DETECTED AS CHIP-RAM).				*/
				 ACS_CFG2 & !RW_CPU & !UDS_CPU &  CFG0_CFG_WRP_EN & D13;
CFG2_SRAM_10_EN.AR	=	!RST_MB;
												/* D14		FAST-RAM 0xF80000 - 0xFFFFFF (FAST-ROM).										*/
CFG2_SRAM_F8_EN.D	=	 D14;								/* 0:		FAST-RAM IS DISABLED.												*/
CFG2_SRAM_F8_EN.CK	=	 ACS_CFG2 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-RAM IS ENABLED.													*/
CFG2_SRAM_F8_EN.AR	=	 RST_DET_CNT_Q24;
												/* D15		FAST-ROM WRITE PROTECT. 												*/
CFG2_SROM_WRP_EN.D	=	 D15;								/* 0:		FAST-ROM AREA (SRAM @ 0xF80000 - 0xFFFFFF) CAN BE WRITTEN.							*/
CFG2_SROM_WRP_EN.CK	=	 ACS_CFG2 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-ROM AREA (SRAM @ 0xF80000 - 0xFFFFFF) IS WRITE PROTECTED.						*/
CFG2_SROM_WRP_EN.AR	=	 RST_DET_CNT_Q24;

/* 				 CONFIG REGISTER 3 WRITE (0xBFFC00 - 0xBFFFFF) 		 D12		FAST-RAM 0xF00000 - 0xF7FFFF (EXTENDED ROM SPACE).								*/
CFG3_SRAM_F0_EN.D	=	 D12;								/* 0:		FAST-RAM IS DISABLED.												*/
CFG3_SRAM_F0_EN.CK	=	 ACS_CFG3 & !RW_CPU & !UDS_CPU & !CFG0_CFG_WRP_EN;	/* 1:		FAST-RAM IS ENABLED.													*/
CFG3_SRAM_F0_EN.AR	=	!RST_MB;


/*				CONFIG REGISTER 0-3 D12 READ																					*/
D12			=	ACS_CFG0 &  CFG0_CLK_SEL0   #
				ACS_CFG1 &  CFG1_SRAM_08_EN #
				ACS_CFG2 &  CFG2_SRAM_00_EN #
				ACS_CFG3 &  CFG3_SRAM_F0_EN;
D12.OE			=      ACS_CFG  & !AS_CPU & RW_CPU;

/*				CONFIG REGISTER 0-3 D13 READ																					*/
D13			=	ACS_CFG0 &  CFG0_CLK_SEL1 	 #
				ACS_CFG1 &  CFG1_SRAM_DC_EN #
				ACS_CFG2 &  CFG2_SRAM_10_EN;
D13.OE			=      ACS_CFG  & !AS_CPU & RW_CPU;

/*				CONFIG REGISTER 0-3 D14 READ																					*/
D14			=	ACS_CFG0 &  CFG0_CFG_WRP_EN #
				ACS_CFG1 &  CFG1_SRAM_DF_EN #
				ACS_CFG2 &  CFG2_SRAM_F8_EN;
D14.OE			=      ACS_CFG  & !AS_CPU & RW_CPU;

/*				CONFIG REGISTER 0-3 D15 READ																					*/
D15			=	ACS_CFG0 &  CFG0_CFG_RSTP_EN #
				ACS_CFG1 &  CFG1_SRAM_E8_EN  #
				ACS_CFG2 &  CFG2_SROM_WRP_EN;
D15.OE			=      ACS_CFG  & !AS_CPU & RW_CPU;


/******************* LONG RESET DETECT (2 SEC.) RIPPLE COUNTER *****************************************************************************************************************************************/

RST_DET_CNT_Q00.D	=	!RST_DET_CNT_Q00;	/* COUNTER STARTS WHEN MOTHERBOARD RESET GOES LOW, CLOCKED BY 7M. WHEN RESET HAS BEEN HELD LOW FOR 2.4 SECONDS, COUNTER MSB (RST_DET_CNT_Q24) IS SET,	*/
RST_DET_CNT_Q00.CK	=	 CLK_MB;		/* WHICH TRIGGERS A CLEAR OF CONFIG BITS CFG0_CLK_SEL0, CFG0_CLK_SEL1, CFG0_CFG_WRP_EN, CFG0_CFG_RSTP_EN, CFG2_SRAM_F8_EN AND CFG2_SROM_WRP_EN.		*/
RST_DET_CNT_Q00.AR 	=	 RST_MB;

RST_DET_CNT_Q01.D	=	!RST_DET_CNT_Q01;
RST_DET_CNT_Q01.CK	=	!RST_DET_CNT_Q00;
RST_DET_CNT_Q01.AR 	=	 RST_MB;

RST_DET_CNT_Q02.D	=	!RST_DET_CNT_Q02;
RST_DET_CNT_Q02.CK	=	!RST_DET_CNT_Q01;
RST_DET_CNT_Q02.AR 	=	 RST_MB;

RST_DET_CNT_Q03.D	=	!RST_DET_CNT_Q03;
RST_DET_CNT_Q03.CK	=	!RST_DET_CNT_Q02;
RST_DET_CNT_Q03.AR 	=	 RST_MB;

RST_DET_CNT_Q04.D	=	!RST_DET_CNT_Q04;
RST_DET_CNT_Q04.CK	=	!RST_DET_CNT_Q03;
RST_DET_CNT_Q04.AR 	=	 RST_MB;

RST_DET_CNT_Q05.D	=	!RST_DET_CNT_Q05;
RST_DET_CNT_Q05.CK	=	!RST_DET_CNT_Q04;
RST_DET_CNT_Q05.AR 	=	 RST_MB;

RST_DET_CNT_Q06.D	=	!RST_DET_CNT_Q06;
RST_DET_CNT_Q06.CK	=	!RST_DET_CNT_Q05;
RST_DET_CNT_Q06.AR 	=	 RST_MB;

RST_DET_CNT_Q07.D	=	!RST_DET_CNT_Q07;
RST_DET_CNT_Q07.CK	=	!RST_DET_CNT_Q06;
RST_DET_CNT_Q07.AR 	=	 RST_MB;

RST_DET_CNT_Q08.D	=	!RST_DET_CNT_Q08;
RST_DET_CNT_Q08.CK	=	!RST_DET_CNT_Q07;
RST_DET_CNT_Q08.AR 	=	 RST_MB;

RST_DET_CNT_Q09.D	=	!RST_DET_CNT_Q09;
RST_DET_CNT_Q09.CK	=	!RST_DET_CNT_Q08;
RST_DET_CNT_Q09.AR 	=	 RST_MB;

RST_DET_CNT_Q10.D	=	!RST_DET_CNT_Q10;
RST_DET_CNT_Q10.CK	=	!RST_DET_CNT_Q09;
RST_DET_CNT_Q10.AR 	=	 RST_MB;

RST_DET_CNT_Q11.D	=	!RST_DET_CNT_Q11;
RST_DET_CNT_Q11.CK	=	!RST_DET_CNT_Q10;
RST_DET_CNT_Q11.AR 	=	 RST_MB;

RST_DET_CNT_Q12.D	=	!RST_DET_CNT_Q12;
RST_DET_CNT_Q12.CK	=	!RST_DET_CNT_Q11;
RST_DET_CNT_Q12.AR 	=	 RST_MB;

RST_DET_CNT_Q13.D	=	!RST_DET_CNT_Q13;
RST_DET_CNT_Q13.CK	=	!RST_DET_CNT_Q12;
RST_DET_CNT_Q13.AR 	=	 RST_MB;

RST_DET_CNT_Q14.D	=	!RST_DET_CNT_Q14;
RST_DET_CNT_Q14.CK	=	!RST_DET_CNT_Q13;
RST_DET_CNT_Q14.AR 	=	 RST_MB;

RST_DET_CNT_Q15.D	=	!RST_DET_CNT_Q15;
RST_DET_CNT_Q15.CK	=	!RST_DET_CNT_Q14;
RST_DET_CNT_Q15.AR 	=	 RST_MB;

RST_DET_CNT_Q16.D	=	!RST_DET_CNT_Q16;
RST_DET_CNT_Q16.CK	=	!RST_DET_CNT_Q15;
RST_DET_CNT_Q16.AR 	=	 RST_MB;

RST_DET_CNT_Q17.D	=	!RST_DET_CNT_Q17;
RST_DET_CNT_Q17.CK	=	!RST_DET_CNT_Q16;
RST_DET_CNT_Q17.AR 	=	 RST_MB;

RST_DET_CNT_Q18.D	=	!RST_DET_CNT_Q18;
RST_DET_CNT_Q18.CK	=	!RST_DET_CNT_Q17;
RST_DET_CNT_Q18.AR 	=	 RST_MB;

RST_DET_CNT_Q19.D	=	!RST_DET_CNT_Q19;
RST_DET_CNT_Q19.CK	=	!RST_DET_CNT_Q18;
RST_DET_CNT_Q19.AR 	=	 RST_MB;

RST_DET_CNT_Q20.D	=	!RST_DET_CNT_Q20;
RST_DET_CNT_Q20.CK	=	!RST_DET_CNT_Q19;
RST_DET_CNT_Q20.AR 	=	 RST_MB;

RST_DET_CNT_Q21.D	=	!RST_DET_CNT_Q21;
RST_DET_CNT_Q21.CK	=	!RST_DET_CNT_Q20;
RST_DET_CNT_Q21.AR 	=	 RST_MB;

RST_DET_CNT_Q22.D	=	!RST_DET_CNT_Q22;
RST_DET_CNT_Q22.CK	=	!RST_DET_CNT_Q21;
RST_DET_CNT_Q22.AR 	=	 RST_MB;

RST_DET_CNT_Q23.D	=	!RST_DET_CNT_Q23;
RST_DET_CNT_Q23.CK	=	!RST_DET_CNT_Q22;
RST_DET_CNT_Q23.AR 	=	 RST_MB;

RST_DET_CNT_Q24.D	=	!RST_DET_CNT_Q24;
RST_DET_CNT_Q24.CK	=	!RST_DET_CNT_Q23;
RST_DET_CNT_Q24.AR 	=	 RST_MB;


/*******************************************************************************************************************************************************************************************************/
